// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.0--rc1
// source: friend/friend.proto

package friend

import (
	context "context"
	sdkws "github.com/Meikwei/protocol/sdkws"
	wrapperspb "github.com/Meikwei/protocol/wrapperspb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 请求获取分页好友信息
type GetPaginationFriendsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkws.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"` // 分页参数
	UserID     string                   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`         // 用户ID
}

func (x *GetPaginationFriendsReq) Reset() {
	*x = GetPaginationFriendsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaginationFriendsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaginationFriendsReq) ProtoMessage() {}

func (x *GetPaginationFriendsReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaginationFriendsReq.ProtoReflect.Descriptor instead.
func (*GetPaginationFriendsReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{0}
}

func (x *GetPaginationFriendsReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetPaginationFriendsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 响应获取分页好友信息
type GetPaginationFriendsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendsInfo []*sdkws.FriendInfo `protobuf:"bytes,1,rep,name=friendsInfo,proto3" json:"friendsInfo"` // 好友信息列表
	Total       int32               `protobuf:"varint,2,opt,name=total,proto3" json:"total"`            // 总数
}

func (x *GetPaginationFriendsResp) Reset() {
	*x = GetPaginationFriendsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaginationFriendsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaginationFriendsResp) ProtoMessage() {}

func (x *GetPaginationFriendsResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaginationFriendsResp.ProtoReflect.Descriptor instead.
func (*GetPaginationFriendsResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{1}
}

func (x *GetPaginationFriendsResp) GetFriendsInfo() []*sdkws.FriendInfo {
	if x != nil {
		return x.FriendsInfo
	}
	return nil
}

func (x *GetPaginationFriendsResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 发起添加好友申请
type ApplyToAddFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID"` // 申请人ID
	ToUserID   string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID"`     // 被申请者ID
	ReqMsg     string `protobuf:"bytes,3,opt,name=reqMsg,proto3" json:"reqMsg"`         // 申请消息
	Ex         string `protobuf:"bytes,4,opt,name=ex,proto3" json:"ex"`                 // 扩展信息
}

func (x *ApplyToAddFriendReq) Reset() {
	*x = ApplyToAddFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyToAddFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyToAddFriendReq) ProtoMessage() {}

func (x *ApplyToAddFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyToAddFriendReq.ProtoReflect.Descriptor instead.
func (*ApplyToAddFriendReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{2}
}

func (x *ApplyToAddFriendReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *ApplyToAddFriendReq) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

func (x *ApplyToAddFriendReq) GetReqMsg() string {
	if x != nil {
		return x.ReqMsg
	}
	return ""
}

func (x *ApplyToAddFriendReq) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

// 响应添加好友申请（空消息体，可根据实际需要添加字段）
type ApplyToAddFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApplyToAddFriendResp) Reset() {
	*x = ApplyToAddFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyToAddFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyToAddFriendResp) ProtoMessage() {}

func (x *ApplyToAddFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyToAddFriendResp.ProtoReflect.Descriptor instead.
func (*ApplyToAddFriendResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{3}
}

// 导入好友
type ImportFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID   string   `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"`     // 好友列表拥有者ID
	FriendUserIDs []string `protobuf:"bytes,2,rep,name=friendUserIDs,proto3" json:"friendUserIDs"` // 好友ID列表
}

func (x *ImportFriendReq) Reset() {
	*x = ImportFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportFriendReq) ProtoMessage() {}

func (x *ImportFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportFriendReq.ProtoReflect.Descriptor instead.
func (*ImportFriendReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{4}
}

func (x *ImportFriendReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *ImportFriendReq) GetFriendUserIDs() []string {
	if x != nil {
		return x.FriendUserIDs
	}
	return nil
}

// 响应导入好友（空消息体，可根据实际需要添加字段）
type ImportFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportFriendResp) Reset() {
	*x = ImportFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportFriendResp) ProtoMessage() {}

func (x *ImportFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportFriendResp.ProtoReflect.Descriptor instead.
func (*ImportFriendResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{5}
}

// 请求获取分页好友添加申请信息
type GetPaginationFriendsApplyToReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string                   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`         // 用户ID
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"` // 分页参数
}

func (x *GetPaginationFriendsApplyToReq) Reset() {
	*x = GetPaginationFriendsApplyToReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaginationFriendsApplyToReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaginationFriendsApplyToReq) ProtoMessage() {}

func (x *GetPaginationFriendsApplyToReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaginationFriendsApplyToReq.ProtoReflect.Descriptor instead.
func (*GetPaginationFriendsApplyToReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{6}
}

func (x *GetPaginationFriendsApplyToReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetPaginationFriendsApplyToReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// 响应获取分页好友添加申请信息
type GetPaginationFriendsApplyToResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendRequests []*sdkws.FriendRequest `protobuf:"bytes,1,rep,name=FriendRequests,proto3" json:"FriendRequests"` // 好友申请列表
	Total          int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total"`                  // 总数
}

func (x *GetPaginationFriendsApplyToResp) Reset() {
	*x = GetPaginationFriendsApplyToResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaginationFriendsApplyToResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaginationFriendsApplyToResp) ProtoMessage() {}

func (x *GetPaginationFriendsApplyToResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaginationFriendsApplyToResp.ProtoReflect.Descriptor instead.
func (*GetPaginationFriendsApplyToResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{7}
}

func (x *GetPaginationFriendsApplyToResp) GetFriendRequests() []*sdkws.FriendRequest {
	if x != nil {
		return x.FriendRequests
	}
	return nil
}

func (x *GetPaginationFriendsApplyToResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 请求获取指定好友添加申请信息
type GetDesignatedFriendsApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID"` // 申请人ID
	ToUserID   string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID"`     // 被申请者ID
}

func (x *GetDesignatedFriendsApplyReq) Reset() {
	*x = GetDesignatedFriendsApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesignatedFriendsApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesignatedFriendsApplyReq) ProtoMessage() {}

func (x *GetDesignatedFriendsApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesignatedFriendsApplyReq.ProtoReflect.Descriptor instead.
func (*GetDesignatedFriendsApplyReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{8}
}

func (x *GetDesignatedFriendsApplyReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *GetDesignatedFriendsApplyReq) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

// 响应获取指定好友添加申请信息
type GetDesignatedFriendsApplyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendRequests []*sdkws.FriendRequest `protobuf:"bytes,1,rep,name=friendRequests,proto3" json:"friendRequests"` // 好友申请列表
}

func (x *GetDesignatedFriendsApplyResp) Reset() {
	*x = GetDesignatedFriendsApplyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesignatedFriendsApplyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesignatedFriendsApplyResp) ProtoMessage() {}

func (x *GetDesignatedFriendsApplyResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesignatedFriendsApplyResp.ProtoReflect.Descriptor instead.
func (*GetDesignatedFriendsApplyResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{9}
}

func (x *GetDesignatedFriendsApplyResp) GetFriendRequests() []*sdkws.FriendRequest {
	if x != nil {
		return x.FriendRequests
	}
	return nil
}

// 请求获取指定好友信息
type GetDesignatedFriendsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID   string   `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"`     // 好友列表拥有者ID
	FriendUserIDs []string `protobuf:"bytes,2,rep,name=friendUserIDs,proto3" json:"friendUserIDs"` // 好友ID列表
}

func (x *GetDesignatedFriendsReq) Reset() {
	*x = GetDesignatedFriendsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesignatedFriendsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesignatedFriendsReq) ProtoMessage() {}

func (x *GetDesignatedFriendsReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesignatedFriendsReq.ProtoReflect.Descriptor instead.
func (*GetDesignatedFriendsReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{10}
}

func (x *GetDesignatedFriendsReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *GetDesignatedFriendsReq) GetFriendUserIDs() []string {
	if x != nil {
		return x.FriendUserIDs
	}
	return nil
}

// 响应获取指定好友信息
type GetDesignatedFriendsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendsInfo []*sdkws.FriendInfo `protobuf:"bytes,1,rep,name=friendsInfo,proto3" json:"friendsInfo"` // 好友信息列表
}

func (x *GetDesignatedFriendsResp) Reset() {
	*x = GetDesignatedFriendsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesignatedFriendsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesignatedFriendsResp) ProtoMessage() {}

func (x *GetDesignatedFriendsResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesignatedFriendsResp.ProtoReflect.Descriptor instead.
func (*GetDesignatedFriendsResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{11}
}

func (x *GetDesignatedFriendsResp) GetFriendsInfo() []*sdkws.FriendInfo {
	if x != nil {
		return x.FriendsInfo
	}
	return nil
}

// 添加黑名单
type AddBlackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"` // 黑名单拥有者ID
	BlackUserID string `protobuf:"bytes,2,opt,name=blackUserID,proto3" json:"blackUserID"` // 被加入黑名单的用户ID
	Ex          string `protobuf:"bytes,3,opt,name=ex,proto3" json:"ex"`                   // 扩展信息
}

func (x *AddBlackReq) Reset() {
	*x = AddBlackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBlackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBlackReq) ProtoMessage() {}

func (x *AddBlackReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBlackReq.ProtoReflect.Descriptor instead.
func (*AddBlackReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{12}
}

func (x *AddBlackReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *AddBlackReq) GetBlackUserID() string {
	if x != nil {
		return x.BlackUserID
	}
	return ""
}

func (x *AddBlackReq) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

// 响应添加黑名单（空消息体，可根据实际需要添加字段）
type AddBlackResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddBlackResp) Reset() {
	*x = AddBlackResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBlackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBlackResp) ProtoMessage() {}

func (x *AddBlackResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBlackResp.ProtoReflect.Descriptor instead.
func (*AddBlackResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{13}
}

// 移除黑名单
type RemoveBlackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"` // 黑名单拥有者ID
	BlackUserID string `protobuf:"bytes,2,opt,name=blackUserID,proto3" json:"blackUserID"` // 被移除黑名单的用户ID
}

func (x *RemoveBlackReq) Reset() {
	*x = RemoveBlackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBlackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBlackReq) ProtoMessage() {}

func (x *RemoveBlackReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBlackReq.ProtoReflect.Descriptor instead.
func (*RemoveBlackReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{14}
}

func (x *RemoveBlackReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *RemoveBlackReq) GetBlackUserID() string {
	if x != nil {
		return x.BlackUserID
	}
	return ""
}

// 响应移除黑名单（空消息体，可根据实际需要添加字段）
type RemoveBlackResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveBlackResp) Reset() {
	*x = RemoveBlackResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBlackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBlackResp) ProtoMessage() {}

func (x *RemoveBlackResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBlackResp.ProtoReflect.Descriptor instead.
func (*RemoveBlackResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{15}
}

// 请求获取分页黑名单信息
type GetPaginationBlacksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string                   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`         // 用户ID
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"` // 分页参数
}

func (x *GetPaginationBlacksReq) Reset() {
	*x = GetPaginationBlacksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaginationBlacksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaginationBlacksReq) ProtoMessage() {}

func (x *GetPaginationBlacksReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaginationBlacksReq.ProtoReflect.Descriptor instead.
func (*GetPaginationBlacksReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{16}
}

func (x *GetPaginationBlacksReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetPaginationBlacksReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// 响应获取分页黑名单信息
type GetPaginationBlacksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blacks []*sdkws.BlackInfo `protobuf:"bytes,1,rep,name=blacks,proto3" json:"blacks"` // 黑名单信息列表
	Total  int32              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`  // 总数
}

func (x *GetPaginationBlacksResp) Reset() {
	*x = GetPaginationBlacksResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaginationBlacksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaginationBlacksResp) ProtoMessage() {}

func (x *GetPaginationBlacksResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaginationBlacksResp.ProtoReflect.Descriptor instead.
func (*GetPaginationBlacksResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{17}
}

func (x *GetPaginationBlacksResp) GetBlacks() []*sdkws.BlackInfo {
	if x != nil {
		return x.Blacks
	}
	return nil
}

func (x *GetPaginationBlacksResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 判断是否为好友
type IsFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID1 string `protobuf:"bytes,1,opt,name=userID1,proto3" json:"userID1"` // 用户ID1
	UserID2 string `protobuf:"bytes,2,opt,name=userID2,proto3" json:"userID2"` // 用户ID2
}

func (x *IsFriendReq) Reset() {
	*x = IsFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFriendReq) ProtoMessage() {}

func (x *IsFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFriendReq.ProtoReflect.Descriptor instead.
func (*IsFriendReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{18}
}

func (x *IsFriendReq) GetUserID1() string {
	if x != nil {
		return x.UserID1
	}
	return ""
}

func (x *IsFriendReq) GetUserID2() string {
	if x != nil {
		return x.UserID2
	}
	return ""
}

// 响应判断是否为好友
type IsFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InUser1Friends bool `protobuf:"varint,1,opt,name=inUser1Friends,proto3" json:"inUser1Friends"` // userID2是否在userID1的好友列表中
	InUser2Friends bool `protobuf:"varint,2,opt,name=inUser2Friends,proto3" json:"inUser2Friends"` // userID1是否在userID2的好友列表中
}

func (x *IsFriendResp) Reset() {
	*x = IsFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFriendResp) ProtoMessage() {}

func (x *IsFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFriendResp.ProtoReflect.Descriptor instead.
func (*IsFriendResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{19}
}

func (x *IsFriendResp) GetInUser1Friends() bool {
	if x != nil {
		return x.InUser1Friends
	}
	return false
}

func (x *IsFriendResp) GetInUser2Friends() bool {
	if x != nil {
		return x.InUser2Friends
	}
	return false
}

// 判断是否在黑名单中
type IsBlackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID1 string `protobuf:"bytes,1,opt,name=userID1,proto3" json:"userID1"` // 用户ID1
	UserID2 string `protobuf:"bytes,2,opt,name=userID2,proto3" json:"userID2"` // 用户ID2
}

func (x *IsBlackReq) Reset() {
	*x = IsBlackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsBlackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBlackReq) ProtoMessage() {}

func (x *IsBlackReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBlackReq.ProtoReflect.Descriptor instead.
func (*IsBlackReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{20}
}

func (x *IsBlackReq) GetUserID1() string {
	if x != nil {
		return x.UserID1
	}
	return ""
}

func (x *IsBlackReq) GetUserID2() string {
	if x != nil {
		return x.UserID2
	}
	return ""
}

// 响应判断是否在黑名单中
type IsBlackResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InUser1Blacks bool `protobuf:"varint,1,opt,name=inUser1Blacks,proto3" json:"inUser1Blacks"` // userID2是否在userID1的黑名单中
	InUser2Blacks bool `protobuf:"varint,2,opt,name=inUser2Blacks,proto3" json:"inUser2Blacks"` // userID1是否在userID2的黑名单中
}

func (x *IsBlackResp) Reset() {
	*x = IsBlackResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsBlackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBlackResp) ProtoMessage() {}

func (x *IsBlackResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBlackResp.ProtoReflect.Descriptor instead.
func (*IsBlackResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{21}
}

func (x *IsBlackResp) GetInUser1Blacks() bool {
	if x != nil {
		return x.InUser1Blacks
	}
	return false
}

func (x *IsBlackResp) GetInUser2Blacks() bool {
	if x != nil {
		return x.InUser2Blacks
	}
	return false
}

// 删除好友
type DeleteFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID  string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"`   // 好友列表拥有者ID
	FriendUserID string `protobuf:"bytes,2,opt,name=friendUserID,proto3" json:"friendUserID"` // 被删除好友的ID
}

func (x *DeleteFriendReq) Reset() {
	*x = DeleteFriendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendReq) ProtoMessage() {}

func (x *DeleteFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendReq.ProtoReflect.Descriptor instead.
func (*DeleteFriendReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteFriendReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *DeleteFriendReq) GetFriendUserID() string {
	if x != nil {
		return x.FriendUserID
	}
	return ""
}

// 响应删除好友（空消息体，可根据实际需要添加字段）
type DeleteFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFriendResp) Reset() {
	*x = DeleteFriendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendResp) ProtoMessage() {}

func (x *DeleteFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendResp.ProtoReflect.Descriptor instead.
func (*DeleteFriendResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{23}
}

// 处理好友申请
type RespondFriendApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID   string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID"`      // 申请人ID
	ToUserID     string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID"`          // 被申请者ID
	HandleResult int32  `protobuf:"varint,3,opt,name=handleResult,proto3" json:"handleResult"` // 处理结果（如：接受、拒绝）
	HandleMsg    string `protobuf:"bytes,4,opt,name=handleMsg,proto3" json:"handleMsg"`        // 处理消息
}

func (x *RespondFriendApplyReq) Reset() {
	*x = RespondFriendApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondFriendApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondFriendApplyReq) ProtoMessage() {}

func (x *RespondFriendApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondFriendApplyReq.ProtoReflect.Descriptor instead.
func (*RespondFriendApplyReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{24}
}

func (x *RespondFriendApplyReq) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *RespondFriendApplyReq) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

func (x *RespondFriendApplyReq) GetHandleResult() int32 {
	if x != nil {
		return x.HandleResult
	}
	return 0
}

func (x *RespondFriendApplyReq) GetHandleMsg() string {
	if x != nil {
		return x.HandleMsg
	}
	return ""
}

// 响应处理好友申请（空消息体，可根据实际需要添加字段）
type RespondFriendApplyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondFriendApplyResp) Reset() {
	*x = RespondFriendApplyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondFriendApplyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondFriendApplyResp) ProtoMessage() {}

func (x *RespondFriendApplyResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondFriendApplyResp.ProtoReflect.Descriptor instead.
func (*RespondFriendApplyResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{25}
}

// updateFriendsReq 用于更新好友信息的请求参数
type UpdateFriendsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID   string                  `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"`     // 主体用户的ID
	FriendUserIDs []string                `protobuf:"bytes,2,rep,name=friendUserIDs,proto3" json:"friendUserIDs"` // 好友用户ID列表
	IsPinned      *wrapperspb.BoolValue   `protobuf:"bytes,3,opt,name=isPinned,proto3" json:"isPinned"`           // 是否置顶
	Remark        *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark"`               // 备注
	Ex            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=ex,proto3" json:"ex"`                       // 扩展信息
}

func (x *UpdateFriendsReq) Reset() {
	*x = UpdateFriendsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFriendsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFriendsReq) ProtoMessage() {}

func (x *UpdateFriendsReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFriendsReq.ProtoReflect.Descriptor instead.
func (*UpdateFriendsReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateFriendsReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *UpdateFriendsReq) GetFriendUserIDs() []string {
	if x != nil {
		return x.FriendUserIDs
	}
	return nil
}

func (x *UpdateFriendsReq) GetIsPinned() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsPinned
	}
	return nil
}

func (x *UpdateFriendsReq) GetRemark() *wrapperspb.StringValue {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *UpdateFriendsReq) GetEx() *wrapperspb.StringValue {
	if x != nil {
		return x.Ex
	}
	return nil
}

// updateFriendsResp 用于更新好友信息的响应参数
type UpdateFriendsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateFriendsResp) Reset() {
	*x = UpdateFriendsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFriendsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFriendsResp) ProtoMessage() {}

func (x *UpdateFriendsResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFriendsResp.ProtoReflect.Descriptor instead.
func (*UpdateFriendsResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{27}
}

// setFriendRemarkReq 用于设置好友备注的请求参数
type SetFriendRemarkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID  string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"`   // 主体用户的ID
	FriendUserID string `protobuf:"bytes,2,opt,name=friendUserID,proto3" json:"friendUserID"` // 好友的用户ID
	Remark       string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark"`             // 备注信息
}

func (x *SetFriendRemarkReq) Reset() {
	*x = SetFriendRemarkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFriendRemarkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFriendRemarkReq) ProtoMessage() {}

func (x *SetFriendRemarkReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFriendRemarkReq.ProtoReflect.Descriptor instead.
func (*SetFriendRemarkReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{28}
}

func (x *SetFriendRemarkReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *SetFriendRemarkReq) GetFriendUserID() string {
	if x != nil {
		return x.FriendUserID
	}
	return ""
}

func (x *SetFriendRemarkReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// setFriendRemarkResp 用于设置好友备注的响应参数
type SetFriendRemarkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetFriendRemarkResp) Reset() {
	*x = SetFriendRemarkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFriendRemarkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFriendRemarkResp) ProtoMessage() {}

func (x *SetFriendRemarkResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFriendRemarkResp.ProtoReflect.Descriptor instead.
func (*SetFriendRemarkResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{29}
}

// getPaginationFriendsApplyFromReq 用于获取好友申请信息的请求参数
type GetPaginationFriendsApplyFromReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string                   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`         // 用户ID
	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"` // 分页参数
}

func (x *GetPaginationFriendsApplyFromReq) Reset() {
	*x = GetPaginationFriendsApplyFromReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaginationFriendsApplyFromReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaginationFriendsApplyFromReq) ProtoMessage() {}

func (x *GetPaginationFriendsApplyFromReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaginationFriendsApplyFromReq.ProtoReflect.Descriptor instead.
func (*GetPaginationFriendsApplyFromReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{30}
}

func (x *GetPaginationFriendsApplyFromReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetPaginationFriendsApplyFromReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// getPaginationFriendsApplyFromResp 用于获取好友申请信息的响应参数
type GetPaginationFriendsApplyFromResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendRequests []*sdkws.FriendRequest `protobuf:"bytes,1,rep,name=friendRequests,proto3" json:"friendRequests"` // 好友申请列表
	Total          int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total"`                  // 总数
}

func (x *GetPaginationFriendsApplyFromResp) Reset() {
	*x = GetPaginationFriendsApplyFromResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaginationFriendsApplyFromResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaginationFriendsApplyFromResp) ProtoMessage() {}

func (x *GetPaginationFriendsApplyFromResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaginationFriendsApplyFromResp.ProtoReflect.Descriptor instead.
func (*GetPaginationFriendsApplyFromResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{31}
}

func (x *GetPaginationFriendsApplyFromResp) GetFriendRequests() []*sdkws.FriendRequest {
	if x != nil {
		return x.FriendRequests
	}
	return nil
}

func (x *GetPaginationFriendsApplyFromResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// getFriendIDsReq 用于获取用户好友ID列表的请求参数
type GetFriendIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // 用户ID
}

func (x *GetFriendIDsReq) Reset() {
	*x = GetFriendIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendIDsReq) ProtoMessage() {}

func (x *GetFriendIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendIDsReq.ProtoReflect.Descriptor instead.
func (*GetFriendIDsReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{32}
}

func (x *GetFriendIDsReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// getFriendIDsResp 用于获取用户好友ID列表的响应参数
type GetFriendIDsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendIDs []string `protobuf:"bytes,1,rep,name=friendIDs,proto3" json:"friendIDs"` // 好友ID列表
}

func (x *GetFriendIDsResp) Reset() {
	*x = GetFriendIDsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFriendIDsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendIDsResp) ProtoMessage() {}

func (x *GetFriendIDsResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendIDsResp.ProtoReflect.Descriptor instead.
func (*GetFriendIDsResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{33}
}

func (x *GetFriendIDsResp) GetFriendIDs() []string {
	if x != nil {
		return x.FriendIDs
	}
	return nil
}

// getSpecifiedFriendsInfoReq 用于获取指定好友信息的请求参数
type GetSpecifiedFriendsInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID string   `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"` // 主体用户的ID
	UserIDList  []string `protobuf:"bytes,2,rep,name=userIDList,proto3" json:"userIDList"`   // 需要获取信息的用户ID列表
}

func (x *GetSpecifiedFriendsInfoReq) Reset() {
	*x = GetSpecifiedFriendsInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpecifiedFriendsInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpecifiedFriendsInfoReq) ProtoMessage() {}

func (x *GetSpecifiedFriendsInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpecifiedFriendsInfoReq.ProtoReflect.Descriptor instead.
func (*GetSpecifiedFriendsInfoReq) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{34}
}

func (x *GetSpecifiedFriendsInfoReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *GetSpecifiedFriendsInfoReq) GetUserIDList() []string {
	if x != nil {
		return x.UserIDList
	}
	return nil
}

// getSpecifiedFriendsInfoInfo 包含用户的基本信息、好友信息和黑名单信息
type GetSpecifiedFriendsInfoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo   *sdkws.UserInfo   `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo"`     // 用户基本信息
	FriendInfo *sdkws.FriendInfo `protobuf:"bytes,2,opt,name=friendInfo,proto3" json:"friendInfo"` // 好友信息
	BlackInfo  *sdkws.BlackInfo  `protobuf:"bytes,3,opt,name=blackInfo,proto3" json:"blackInfo"`   // 黑名单信息
}

func (x *GetSpecifiedFriendsInfoInfo) Reset() {
	*x = GetSpecifiedFriendsInfoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpecifiedFriendsInfoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpecifiedFriendsInfoInfo) ProtoMessage() {}

func (x *GetSpecifiedFriendsInfoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpecifiedFriendsInfoInfo.ProtoReflect.Descriptor instead.
func (*GetSpecifiedFriendsInfoInfo) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{35}
}

func (x *GetSpecifiedFriendsInfoInfo) GetUserInfo() *sdkws.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *GetSpecifiedFriendsInfoInfo) GetFriendInfo() *sdkws.FriendInfo {
	if x != nil {
		return x.FriendInfo
	}
	return nil
}

func (x *GetSpecifiedFriendsInfoInfo) GetBlackInfo() *sdkws.BlackInfo {
	if x != nil {
		return x.BlackInfo
	}
	return nil
}

// getSpecifiedFriendsInfoResp 用于获取指定好友信息的响应参数
type GetSpecifiedFriendsInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*GetSpecifiedFriendsInfoInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos"` // 指定好友的信息列表
}

func (x *GetSpecifiedFriendsInfoResp) Reset() {
	*x = GetSpecifiedFriendsInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpecifiedFriendsInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpecifiedFriendsInfoResp) ProtoMessage() {}

func (x *GetSpecifiedFriendsInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpecifiedFriendsInfoResp.ProtoReflect.Descriptor instead.
func (*GetSpecifiedFriendsInfoResp) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{36}
}

func (x *GetSpecifiedFriendsInfoResp) GetInfos() []*GetSpecifiedFriendsInfoInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

var File_friend_friend_proto protoreflect.FileDescriptor

var file_friend_friend_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x1a, 0x11, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x70, 0x62, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x79, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x64,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0x16,
	0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x59, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x22, 0x12, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x78, 0x0a, 0x1e, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x7b, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x42, 0x0a, 0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x65, 0x74,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x1c,
	0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x63, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x61, 0x0a,
	0x17, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x22, 0x55, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0b,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0x0e, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x54, 0x0a, 0x0e, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x11, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x70, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x65, 0x74, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2e, 0x0a, 0x06, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x41, 0x0a, 0x0b, 0x69, 0x73, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x31, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x32, 0x22, 0x5e, 0x0a, 0x0c, 0x69, 0x73, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x31, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x31, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x40, 0x0a, 0x0a, 0x69, 0x73, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x31, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x32, 0x22, 0x59, 0x0a, 0x0b, 0x69,
	0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x31, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x31, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x57, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x12, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x18, 0x0a, 0x16, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0xf3, 0x01, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x65, 0x74, 0x69,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2b,
	0x0a, 0x02, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x65, 0x74,
	0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x65, 0x78, 0x22, 0x13, 0x0a, 0x11, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x72, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0x15, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7a, 0x0a, 0x20, 0x67,
	0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x65,
	0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x21, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x77, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x29, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x30, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49,
	0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x44, 0x73, 0x22, 0x5e, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x77, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x65, 0x74,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x34, 0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0x85, 0x0d, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x12, 0x59, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x41, 0x64,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7a, 0x0a, 0x1b, 0x67,
	0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x2c, 0x2e, 0x61, 0x65, 0x74,
	0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d,
	0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2e, 0x2e, 0x61, 0x65, 0x74, 0x69,
	0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x61, 0x65, 0x74, 0x69,
	0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x19, 0x67, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x41, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x61,
	0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x61, 0x64, 0x64, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x41, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x19, 0x2e, 0x61, 0x65,
	0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x69, 0x73, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x69, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3e, 0x0a, 0x07, 0x69, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x2e,
	0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x69, 0x73, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x69, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x65, 0x74, 0x69,
	0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67,
	0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x2e, 0x61, 0x65,
	0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x2e, 0x61, 0x65,
	0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x73, 0x65, 0x74, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x73, 0x65, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x4e, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x12, 0x1d, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x65, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d,
	0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12,
	0x25, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67,
	0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d,
	0x0a, 0x0c, 0x67, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x73, 0x12, 0x1d,
	0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67, 0x65, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6e, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d,
	0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x42, 0x24, 0x5a,
	0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x65, 0x69, 0x6b,
	0x77, 0x65, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_friend_friend_proto_rawDescOnce sync.Once
	file_friend_friend_proto_rawDescData = file_friend_friend_proto_rawDesc
)

func file_friend_friend_proto_rawDescGZIP() []byte {
	file_friend_friend_proto_rawDescOnce.Do(func() {
		file_friend_friend_proto_rawDescData = protoimpl.X.CompressGZIP(file_friend_friend_proto_rawDescData)
	})
	return file_friend_friend_proto_rawDescData
}

var file_friend_friend_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_friend_friend_proto_goTypes = []interface{}{
	(*GetPaginationFriendsReq)(nil),           // 0: aetim.friend.getPaginationFriendsReq
	(*GetPaginationFriendsResp)(nil),          // 1: aetim.friend.getPaginationFriendsResp
	(*ApplyToAddFriendReq)(nil),               // 2: aetim.friend.applyToAddFriendReq
	(*ApplyToAddFriendResp)(nil),              // 3: aetim.friend.applyToAddFriendResp
	(*ImportFriendReq)(nil),                   // 4: aetim.friend.importFriendReq
	(*ImportFriendResp)(nil),                  // 5: aetim.friend.importFriendResp
	(*GetPaginationFriendsApplyToReq)(nil),    // 6: aetim.friend.getPaginationFriendsApplyToReq
	(*GetPaginationFriendsApplyToResp)(nil),   // 7: aetim.friend.getPaginationFriendsApplyToResp
	(*GetDesignatedFriendsApplyReq)(nil),      // 8: aetim.friend.getDesignatedFriendsApplyReq
	(*GetDesignatedFriendsApplyResp)(nil),     // 9: aetim.friend.getDesignatedFriendsApplyResp
	(*GetDesignatedFriendsReq)(nil),           // 10: aetim.friend.getDesignatedFriendsReq
	(*GetDesignatedFriendsResp)(nil),          // 11: aetim.friend.getDesignatedFriendsResp
	(*AddBlackReq)(nil),                       // 12: aetim.friend.addBlackReq
	(*AddBlackResp)(nil),                      // 13: aetim.friend.addBlackResp
	(*RemoveBlackReq)(nil),                    // 14: aetim.friend.removeBlackReq
	(*RemoveBlackResp)(nil),                   // 15: aetim.friend.removeBlackResp
	(*GetPaginationBlacksReq)(nil),            // 16: aetim.friend.getPaginationBlacksReq
	(*GetPaginationBlacksResp)(nil),           // 17: aetim.friend.getPaginationBlacksResp
	(*IsFriendReq)(nil),                       // 18: aetim.friend.isFriendReq
	(*IsFriendResp)(nil),                      // 19: aetim.friend.isFriendResp
	(*IsBlackReq)(nil),                        // 20: aetim.friend.isBlackReq
	(*IsBlackResp)(nil),                       // 21: aetim.friend.isBlackResp
	(*DeleteFriendReq)(nil),                   // 22: aetim.friend.deleteFriendReq
	(*DeleteFriendResp)(nil),                  // 23: aetim.friend.deleteFriendResp
	(*RespondFriendApplyReq)(nil),             // 24: aetim.friend.respondFriendApplyReq
	(*RespondFriendApplyResp)(nil),            // 25: aetim.friend.respondFriendApplyResp
	(*UpdateFriendsReq)(nil),                  // 26: aetim.friend.updateFriendsReq
	(*UpdateFriendsResp)(nil),                 // 27: aetim.friend.updateFriendsResp
	(*SetFriendRemarkReq)(nil),                // 28: aetim.friend.setFriendRemarkReq
	(*SetFriendRemarkResp)(nil),               // 29: aetim.friend.setFriendRemarkResp
	(*GetPaginationFriendsApplyFromReq)(nil),  // 30: aetim.friend.getPaginationFriendsApplyFromReq
	(*GetPaginationFriendsApplyFromResp)(nil), // 31: aetim.friend.getPaginationFriendsApplyFromResp
	(*GetFriendIDsReq)(nil),                   // 32: aetim.friend.getFriendIDsReq
	(*GetFriendIDsResp)(nil),                  // 33: aetim.friend.getFriendIDsResp
	(*GetSpecifiedFriendsInfoReq)(nil),        // 34: aetim.friend.getSpecifiedFriendsInfoReq
	(*GetSpecifiedFriendsInfoInfo)(nil),       // 35: aetim.friend.getSpecifiedFriendsInfoInfo
	(*GetSpecifiedFriendsInfoResp)(nil),       // 36: aetim.friend.getSpecifiedFriendsInfoResp
	(*sdkws.RequestPagination)(nil),           // 37: aetim.sdkws.RequestPagination
	(*sdkws.FriendInfo)(nil),                  // 38: aetim.sdkws.FriendInfo
	(*sdkws.FriendRequest)(nil),               // 39: aetim.sdkws.FriendRequest
	(*sdkws.BlackInfo)(nil),                   // 40: aetim.sdkws.BlackInfo
	(*wrapperspb.BoolValue)(nil),              // 41: aetim.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),            // 42: aetim.protobuf.StringValue
	(*sdkws.UserInfo)(nil),                    // 43: aetim.sdkws.UserInfo
}
var file_friend_friend_proto_depIdxs = []int32{
	37, // 0: aetim.friend.getPaginationFriendsReq.pagination:type_name -> aetim.sdkws.RequestPagination
	38, // 1: aetim.friend.getPaginationFriendsResp.friendsInfo:type_name -> aetim.sdkws.FriendInfo
	37, // 2: aetim.friend.getPaginationFriendsApplyToReq.pagination:type_name -> aetim.sdkws.RequestPagination
	39, // 3: aetim.friend.getPaginationFriendsApplyToResp.FriendRequests:type_name -> aetim.sdkws.FriendRequest
	39, // 4: aetim.friend.getDesignatedFriendsApplyResp.friendRequests:type_name -> aetim.sdkws.FriendRequest
	38, // 5: aetim.friend.getDesignatedFriendsResp.friendsInfo:type_name -> aetim.sdkws.FriendInfo
	37, // 6: aetim.friend.getPaginationBlacksReq.pagination:type_name -> aetim.sdkws.RequestPagination
	40, // 7: aetim.friend.getPaginationBlacksResp.blacks:type_name -> aetim.sdkws.BlackInfo
	41, // 8: aetim.friend.updateFriendsReq.isPinned:type_name -> aetim.protobuf.BoolValue
	42, // 9: aetim.friend.updateFriendsReq.remark:type_name -> aetim.protobuf.StringValue
	42, // 10: aetim.friend.updateFriendsReq.ex:type_name -> aetim.protobuf.StringValue
	37, // 11: aetim.friend.getPaginationFriendsApplyFromReq.pagination:type_name -> aetim.sdkws.RequestPagination
	39, // 12: aetim.friend.getPaginationFriendsApplyFromResp.friendRequests:type_name -> aetim.sdkws.FriendRequest
	43, // 13: aetim.friend.getSpecifiedFriendsInfoInfo.userInfo:type_name -> aetim.sdkws.UserInfo
	38, // 14: aetim.friend.getSpecifiedFriendsInfoInfo.friendInfo:type_name -> aetim.sdkws.FriendInfo
	40, // 15: aetim.friend.getSpecifiedFriendsInfoInfo.blackInfo:type_name -> aetim.sdkws.BlackInfo
	35, // 16: aetim.friend.getSpecifiedFriendsInfoResp.infos:type_name -> aetim.friend.getSpecifiedFriendsInfoInfo
	2,  // 17: aetim.friend.friend.applyToAddFriend:input_type -> aetim.friend.applyToAddFriendReq
	6,  // 18: aetim.friend.friend.getPaginationFriendsApplyTo:input_type -> aetim.friend.getPaginationFriendsApplyToReq
	30, // 19: aetim.friend.friend.getPaginationFriendsApplyFrom:input_type -> aetim.friend.getPaginationFriendsApplyFromReq
	8,  // 20: aetim.friend.friend.getDesignatedFriendsApply:input_type -> aetim.friend.getDesignatedFriendsApplyReq
	12, // 21: aetim.friend.friend.addBlack:input_type -> aetim.friend.addBlackReq
	14, // 22: aetim.friend.friend.removeBlack:input_type -> aetim.friend.removeBlackReq
	18, // 23: aetim.friend.friend.isFriend:input_type -> aetim.friend.isFriendReq
	20, // 24: aetim.friend.friend.isBlack:input_type -> aetim.friend.isBlackReq
	16, // 25: aetim.friend.friend.getPaginationBlacks:input_type -> aetim.friend.getPaginationBlacksReq
	22, // 26: aetim.friend.friend.deleteFriend:input_type -> aetim.friend.deleteFriendReq
	24, // 27: aetim.friend.friend.respondFriendApply:input_type -> aetim.friend.respondFriendApplyReq
	26, // 28: aetim.friend.friend.updateFriends:input_type -> aetim.friend.updateFriendsReq
	28, // 29: aetim.friend.friend.setFriendRemark:input_type -> aetim.friend.setFriendRemarkReq
	4,  // 30: aetim.friend.friend.importFriends:input_type -> aetim.friend.importFriendReq
	10, // 31: aetim.friend.friend.getDesignatedFriends:input_type -> aetim.friend.getDesignatedFriendsReq
	0,  // 32: aetim.friend.friend.getPaginationFriends:input_type -> aetim.friend.getPaginationFriendsReq
	32, // 33: aetim.friend.friend.getFriendIDs:input_type -> aetim.friend.getFriendIDsReq
	34, // 34: aetim.friend.friend.GetSpecifiedFriendsInfo:input_type -> aetim.friend.getSpecifiedFriendsInfoReq
	3,  // 35: aetim.friend.friend.applyToAddFriend:output_type -> aetim.friend.applyToAddFriendResp
	7,  // 36: aetim.friend.friend.getPaginationFriendsApplyTo:output_type -> aetim.friend.getPaginationFriendsApplyToResp
	31, // 37: aetim.friend.friend.getPaginationFriendsApplyFrom:output_type -> aetim.friend.getPaginationFriendsApplyFromResp
	9,  // 38: aetim.friend.friend.getDesignatedFriendsApply:output_type -> aetim.friend.getDesignatedFriendsApplyResp
	13, // 39: aetim.friend.friend.addBlack:output_type -> aetim.friend.addBlackResp
	15, // 40: aetim.friend.friend.removeBlack:output_type -> aetim.friend.removeBlackResp
	19, // 41: aetim.friend.friend.isFriend:output_type -> aetim.friend.isFriendResp
	21, // 42: aetim.friend.friend.isBlack:output_type -> aetim.friend.isBlackResp
	17, // 43: aetim.friend.friend.getPaginationBlacks:output_type -> aetim.friend.getPaginationBlacksResp
	23, // 44: aetim.friend.friend.deleteFriend:output_type -> aetim.friend.deleteFriendResp
	25, // 45: aetim.friend.friend.respondFriendApply:output_type -> aetim.friend.respondFriendApplyResp
	27, // 46: aetim.friend.friend.updateFriends:output_type -> aetim.friend.updateFriendsResp
	29, // 47: aetim.friend.friend.setFriendRemark:output_type -> aetim.friend.setFriendRemarkResp
	5,  // 48: aetim.friend.friend.importFriends:output_type -> aetim.friend.importFriendResp
	11, // 49: aetim.friend.friend.getDesignatedFriends:output_type -> aetim.friend.getDesignatedFriendsResp
	1,  // 50: aetim.friend.friend.getPaginationFriends:output_type -> aetim.friend.getPaginationFriendsResp
	33, // 51: aetim.friend.friend.getFriendIDs:output_type -> aetim.friend.getFriendIDsResp
	36, // 52: aetim.friend.friend.GetSpecifiedFriendsInfo:output_type -> aetim.friend.getSpecifiedFriendsInfoResp
	35, // [35:53] is the sub-list for method output_type
	17, // [17:35] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_friend_friend_proto_init() }
func file_friend_friend_proto_init() {
	if File_friend_friend_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_friend_friend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaginationFriendsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaginationFriendsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyToAddFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyToAddFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaginationFriendsApplyToReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaginationFriendsApplyToResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesignatedFriendsApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesignatedFriendsApplyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesignatedFriendsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesignatedFriendsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBlackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBlackResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBlackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBlackResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaginationBlacksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaginationBlacksResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsBlackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsBlackResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFriendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFriendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondFriendApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondFriendApplyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFriendsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFriendsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFriendRemarkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFriendRemarkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaginationFriendsApplyFromReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaginationFriendsApplyFromResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFriendIDsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpecifiedFriendsInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpecifiedFriendsInfoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpecifiedFriendsInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_friend_friend_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_friend_friend_proto_goTypes,
		DependencyIndexes: file_friend_friend_proto_depIdxs,
		MessageInfos:      file_friend_friend_proto_msgTypes,
	}.Build()
	File_friend_friend_proto = out.File
	file_friend_friend_proto_rawDesc = nil
	file_friend_friend_proto_goTypes = nil
	file_friend_friend_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FriendClient is the client API for Friend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FriendClient interface {
	// 申请加好友
	ApplyToAddFriend(ctx context.Context, in *ApplyToAddFriendReq, opts ...grpc.CallOption) (*ApplyToAddFriendResp, error)
	// 获取收到的好友申请列表
	GetPaginationFriendsApplyTo(ctx context.Context, in *GetPaginationFriendsApplyToReq, opts ...grpc.CallOption) (*GetPaginationFriendsApplyToResp, error)
	// 获取主动发出去的好友申请列表
	GetPaginationFriendsApplyFrom(ctx context.Context, in *GetPaginationFriendsApplyFromReq, opts ...grpc.CallOption) (*GetPaginationFriendsApplyFromResp, error)
	// 获取指定好友申请
	GetDesignatedFriendsApply(ctx context.Context, in *GetDesignatedFriendsApplyReq, opts ...grpc.CallOption) (*GetDesignatedFriendsApplyResp, error)
	// 添加黑名单
	AddBlack(ctx context.Context, in *AddBlackReq, opts ...grpc.CallOption) (*AddBlackResp, error)
	// 移除黑名单
	RemoveBlack(ctx context.Context, in *RemoveBlackReq, opts ...grpc.CallOption) (*RemoveBlackResp, error)
	// 判断是否好友关系
	IsFriend(ctx context.Context, in *IsFriendReq, opts ...grpc.CallOption) (*IsFriendResp, error)
	// 判断是否在黑名单中
	IsBlack(ctx context.Context, in *IsBlackReq, opts ...grpc.CallOption) (*IsBlackResp, error)
	// 获取黑名单列表
	GetPaginationBlacks(ctx context.Context, in *GetPaginationBlacksReq, opts ...grpc.CallOption) (*GetPaginationBlacksResp, error)
	// 删除好友
	DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
	// 对好友申请响应（同意或拒绝）
	RespondFriendApply(ctx context.Context, in *RespondFriendApplyReq, opts ...grpc.CallOption) (*RespondFriendApplyResp, error)
	// 星标好友
	UpdateFriends(ctx context.Context, in *UpdateFriendsReq, opts ...grpc.CallOption) (*UpdateFriendsResp, error)
	// 设置好友备注
	SetFriendRemark(ctx context.Context, in *SetFriendRemarkReq, opts ...grpc.CallOption) (*SetFriendRemarkResp, error)
	// 导入好友关系
	ImportFriends(ctx context.Context, in *ImportFriendReq, opts ...grpc.CallOption) (*ImportFriendResp, error)
	// 翻页获取好友列表 无结果不返回错误
	GetDesignatedFriends(ctx context.Context, in *GetDesignatedFriendsReq, opts ...grpc.CallOption) (*GetDesignatedFriendsResp, error)
	// 获取指定好友信息 有id不存在也返回错误
	GetPaginationFriends(ctx context.Context, in *GetPaginationFriendsReq, opts ...grpc.CallOption) (*GetPaginationFriendsResp, error)
	// 获取好友ID列表
	GetFriendIDs(ctx context.Context, in *GetFriendIDsReq, opts ...grpc.CallOption) (*GetFriendIDsResp, error)
	// 获取指定好友信息
	GetSpecifiedFriendsInfo(ctx context.Context, in *GetSpecifiedFriendsInfoReq, opts ...grpc.CallOption) (*GetSpecifiedFriendsInfoResp, error)
}

type friendClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendClient(cc grpc.ClientConnInterface) FriendClient {
	return &friendClient{cc}
}

func (c *friendClient) ApplyToAddFriend(ctx context.Context, in *ApplyToAddFriendReq, opts ...grpc.CallOption) (*ApplyToAddFriendResp, error) {
	out := new(ApplyToAddFriendResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/applyToAddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetPaginationFriendsApplyTo(ctx context.Context, in *GetPaginationFriendsApplyToReq, opts ...grpc.CallOption) (*GetPaginationFriendsApplyToResp, error) {
	out := new(GetPaginationFriendsApplyToResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/getPaginationFriendsApplyTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetPaginationFriendsApplyFrom(ctx context.Context, in *GetPaginationFriendsApplyFromReq, opts ...grpc.CallOption) (*GetPaginationFriendsApplyFromResp, error) {
	out := new(GetPaginationFriendsApplyFromResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/getPaginationFriendsApplyFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetDesignatedFriendsApply(ctx context.Context, in *GetDesignatedFriendsApplyReq, opts ...grpc.CallOption) (*GetDesignatedFriendsApplyResp, error) {
	out := new(GetDesignatedFriendsApplyResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/getDesignatedFriendsApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) AddBlack(ctx context.Context, in *AddBlackReq, opts ...grpc.CallOption) (*AddBlackResp, error) {
	out := new(AddBlackResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/addBlack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) RemoveBlack(ctx context.Context, in *RemoveBlackReq, opts ...grpc.CallOption) (*RemoveBlackResp, error) {
	out := new(RemoveBlackResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/removeBlack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) IsFriend(ctx context.Context, in *IsFriendReq, opts ...grpc.CallOption) (*IsFriendResp, error) {
	out := new(IsFriendResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/isFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) IsBlack(ctx context.Context, in *IsBlackReq, opts ...grpc.CallOption) (*IsBlackResp, error) {
	out := new(IsBlackResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/isBlack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetPaginationBlacks(ctx context.Context, in *GetPaginationBlacksReq, opts ...grpc.CallOption) (*GetPaginationBlacksResp, error) {
	out := new(GetPaginationBlacksResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/getPaginationBlacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	out := new(DeleteFriendResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/deleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) RespondFriendApply(ctx context.Context, in *RespondFriendApplyReq, opts ...grpc.CallOption) (*RespondFriendApplyResp, error) {
	out := new(RespondFriendApplyResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/respondFriendApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) UpdateFriends(ctx context.Context, in *UpdateFriendsReq, opts ...grpc.CallOption) (*UpdateFriendsResp, error) {
	out := new(UpdateFriendsResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/updateFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) SetFriendRemark(ctx context.Context, in *SetFriendRemarkReq, opts ...grpc.CallOption) (*SetFriendRemarkResp, error) {
	out := new(SetFriendRemarkResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/setFriendRemark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) ImportFriends(ctx context.Context, in *ImportFriendReq, opts ...grpc.CallOption) (*ImportFriendResp, error) {
	out := new(ImportFriendResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/importFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetDesignatedFriends(ctx context.Context, in *GetDesignatedFriendsReq, opts ...grpc.CallOption) (*GetDesignatedFriendsResp, error) {
	out := new(GetDesignatedFriendsResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/getDesignatedFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetPaginationFriends(ctx context.Context, in *GetPaginationFriendsReq, opts ...grpc.CallOption) (*GetPaginationFriendsResp, error) {
	out := new(GetPaginationFriendsResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/getPaginationFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetFriendIDs(ctx context.Context, in *GetFriendIDsReq, opts ...grpc.CallOption) (*GetFriendIDsResp, error) {
	out := new(GetFriendIDsResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/getFriendIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) GetSpecifiedFriendsInfo(ctx context.Context, in *GetSpecifiedFriendsInfoReq, opts ...grpc.CallOption) (*GetSpecifiedFriendsInfoResp, error) {
	out := new(GetSpecifiedFriendsInfoResp)
	err := c.cc.Invoke(ctx, "/aetim.friend.friend/GetSpecifiedFriendsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServer is the server API for Friend service.
type FriendServer interface {
	// 申请加好友
	ApplyToAddFriend(context.Context, *ApplyToAddFriendReq) (*ApplyToAddFriendResp, error)
	// 获取收到的好友申请列表
	GetPaginationFriendsApplyTo(context.Context, *GetPaginationFriendsApplyToReq) (*GetPaginationFriendsApplyToResp, error)
	// 获取主动发出去的好友申请列表
	GetPaginationFriendsApplyFrom(context.Context, *GetPaginationFriendsApplyFromReq) (*GetPaginationFriendsApplyFromResp, error)
	// 获取指定好友申请
	GetDesignatedFriendsApply(context.Context, *GetDesignatedFriendsApplyReq) (*GetDesignatedFriendsApplyResp, error)
	// 添加黑名单
	AddBlack(context.Context, *AddBlackReq) (*AddBlackResp, error)
	// 移除黑名单
	RemoveBlack(context.Context, *RemoveBlackReq) (*RemoveBlackResp, error)
	// 判断是否好友关系
	IsFriend(context.Context, *IsFriendReq) (*IsFriendResp, error)
	// 判断是否在黑名单中
	IsBlack(context.Context, *IsBlackReq) (*IsBlackResp, error)
	// 获取黑名单列表
	GetPaginationBlacks(context.Context, *GetPaginationBlacksReq) (*GetPaginationBlacksResp, error)
	// 删除好友
	DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error)
	// 对好友申请响应（同意或拒绝）
	RespondFriendApply(context.Context, *RespondFriendApplyReq) (*RespondFriendApplyResp, error)
	// 星标好友
	UpdateFriends(context.Context, *UpdateFriendsReq) (*UpdateFriendsResp, error)
	// 设置好友备注
	SetFriendRemark(context.Context, *SetFriendRemarkReq) (*SetFriendRemarkResp, error)
	// 导入好友关系
	ImportFriends(context.Context, *ImportFriendReq) (*ImportFriendResp, error)
	// 翻页获取好友列表 无结果不返回错误
	GetDesignatedFriends(context.Context, *GetDesignatedFriendsReq) (*GetDesignatedFriendsResp, error)
	// 获取指定好友信息 有id不存在也返回错误
	GetPaginationFriends(context.Context, *GetPaginationFriendsReq) (*GetPaginationFriendsResp, error)
	// 获取好友ID列表
	GetFriendIDs(context.Context, *GetFriendIDsReq) (*GetFriendIDsResp, error)
	// 获取指定好友信息
	GetSpecifiedFriendsInfo(context.Context, *GetSpecifiedFriendsInfoReq) (*GetSpecifiedFriendsInfoResp, error)
}

// UnimplementedFriendServer can be embedded to have forward compatible implementations.
type UnimplementedFriendServer struct {
}

func (*UnimplementedFriendServer) ApplyToAddFriend(context.Context, *ApplyToAddFriendReq) (*ApplyToAddFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyToAddFriend not implemented")
}
func (*UnimplementedFriendServer) GetPaginationFriendsApplyTo(context.Context, *GetPaginationFriendsApplyToReq) (*GetPaginationFriendsApplyToResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginationFriendsApplyTo not implemented")
}
func (*UnimplementedFriendServer) GetPaginationFriendsApplyFrom(context.Context, *GetPaginationFriendsApplyFromReq) (*GetPaginationFriendsApplyFromResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginationFriendsApplyFrom not implemented")
}
func (*UnimplementedFriendServer) GetDesignatedFriendsApply(context.Context, *GetDesignatedFriendsApplyReq) (*GetDesignatedFriendsApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesignatedFriendsApply not implemented")
}
func (*UnimplementedFriendServer) AddBlack(context.Context, *AddBlackReq) (*AddBlackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlack not implemented")
}
func (*UnimplementedFriendServer) RemoveBlack(context.Context, *RemoveBlackReq) (*RemoveBlackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlack not implemented")
}
func (*UnimplementedFriendServer) IsFriend(context.Context, *IsFriendReq) (*IsFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFriend not implemented")
}
func (*UnimplementedFriendServer) IsBlack(context.Context, *IsBlackReq) (*IsBlackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBlack not implemented")
}
func (*UnimplementedFriendServer) GetPaginationBlacks(context.Context, *GetPaginationBlacksReq) (*GetPaginationBlacksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginationBlacks not implemented")
}
func (*UnimplementedFriendServer) DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (*UnimplementedFriendServer) RespondFriendApply(context.Context, *RespondFriendApplyReq) (*RespondFriendApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondFriendApply not implemented")
}
func (*UnimplementedFriendServer) UpdateFriends(context.Context, *UpdateFriendsReq) (*UpdateFriendsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriends not implemented")
}
func (*UnimplementedFriendServer) SetFriendRemark(context.Context, *SetFriendRemarkReq) (*SetFriendRemarkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFriendRemark not implemented")
}
func (*UnimplementedFriendServer) ImportFriends(context.Context, *ImportFriendReq) (*ImportFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportFriends not implemented")
}
func (*UnimplementedFriendServer) GetDesignatedFriends(context.Context, *GetDesignatedFriendsReq) (*GetDesignatedFriendsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesignatedFriends not implemented")
}
func (*UnimplementedFriendServer) GetPaginationFriends(context.Context, *GetPaginationFriendsReq) (*GetPaginationFriendsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginationFriends not implemented")
}
func (*UnimplementedFriendServer) GetFriendIDs(context.Context, *GetFriendIDsReq) (*GetFriendIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendIDs not implemented")
}
func (*UnimplementedFriendServer) GetSpecifiedFriendsInfo(context.Context, *GetSpecifiedFriendsInfoReq) (*GetSpecifiedFriendsInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecifiedFriendsInfo not implemented")
}

func RegisterFriendServer(s *grpc.Server, srv FriendServer) {
	s.RegisterService(&_Friend_serviceDesc, srv)
}

func _Friend_ApplyToAddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyToAddFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).ApplyToAddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/ApplyToAddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).ApplyToAddFriend(ctx, req.(*ApplyToAddFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetPaginationFriendsApplyTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaginationFriendsApplyToReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetPaginationFriendsApplyTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/GetPaginationFriendsApplyTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetPaginationFriendsApplyTo(ctx, req.(*GetPaginationFriendsApplyToReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetPaginationFriendsApplyFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaginationFriendsApplyFromReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetPaginationFriendsApplyFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/GetPaginationFriendsApplyFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetPaginationFriendsApplyFrom(ctx, req.(*GetPaginationFriendsApplyFromReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetDesignatedFriendsApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDesignatedFriendsApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetDesignatedFriendsApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/GetDesignatedFriendsApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetDesignatedFriendsApply(ctx, req.(*GetDesignatedFriendsApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_AddBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).AddBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/AddBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).AddBlack(ctx, req.(*AddBlackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_RemoveBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBlackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).RemoveBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/RemoveBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).RemoveBlack(ctx, req.(*RemoveBlackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_IsFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).IsFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/IsFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).IsFriend(ctx, req.(*IsFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_IsBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsBlackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).IsBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/IsBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).IsBlack(ctx, req.(*IsBlackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetPaginationBlacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaginationBlacksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetPaginationBlacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/GetPaginationBlacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetPaginationBlacks(ctx, req.(*GetPaginationBlacksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).DeleteFriend(ctx, req.(*DeleteFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_RespondFriendApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondFriendApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).RespondFriendApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/RespondFriendApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).RespondFriendApply(ctx, req.(*RespondFriendApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_UpdateFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFriendsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).UpdateFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/UpdateFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).UpdateFriends(ctx, req.(*UpdateFriendsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_SetFriendRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFriendRemarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).SetFriendRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/SetFriendRemark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).SetFriendRemark(ctx, req.(*SetFriendRemarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_ImportFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).ImportFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/ImportFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).ImportFriends(ctx, req.(*ImportFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetDesignatedFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDesignatedFriendsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetDesignatedFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/GetDesignatedFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetDesignatedFriends(ctx, req.(*GetDesignatedFriendsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetPaginationFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaginationFriendsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetPaginationFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/GetPaginationFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetPaginationFriends(ctx, req.(*GetPaginationFriendsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetFriendIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetFriendIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/GetFriendIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetFriendIDs(ctx, req.(*GetFriendIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_GetSpecifiedFriendsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecifiedFriendsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetSpecifiedFriendsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.friend.friend/GetSpecifiedFriendsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetSpecifiedFriendsInfo(ctx, req.(*GetSpecifiedFriendsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Friend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aetim.friend.friend",
	HandlerType: (*FriendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "applyToAddFriend",
			Handler:    _Friend_ApplyToAddFriend_Handler,
		},
		{
			MethodName: "getPaginationFriendsApplyTo",
			Handler:    _Friend_GetPaginationFriendsApplyTo_Handler,
		},
		{
			MethodName: "getPaginationFriendsApplyFrom",
			Handler:    _Friend_GetPaginationFriendsApplyFrom_Handler,
		},
		{
			MethodName: "getDesignatedFriendsApply",
			Handler:    _Friend_GetDesignatedFriendsApply_Handler,
		},
		{
			MethodName: "addBlack",
			Handler:    _Friend_AddBlack_Handler,
		},
		{
			MethodName: "removeBlack",
			Handler:    _Friend_RemoveBlack_Handler,
		},
		{
			MethodName: "isFriend",
			Handler:    _Friend_IsFriend_Handler,
		},
		{
			MethodName: "isBlack",
			Handler:    _Friend_IsBlack_Handler,
		},
		{
			MethodName: "getPaginationBlacks",
			Handler:    _Friend_GetPaginationBlacks_Handler,
		},
		{
			MethodName: "deleteFriend",
			Handler:    _Friend_DeleteFriend_Handler,
		},
		{
			MethodName: "respondFriendApply",
			Handler:    _Friend_RespondFriendApply_Handler,
		},
		{
			MethodName: "updateFriends",
			Handler:    _Friend_UpdateFriends_Handler,
		},
		{
			MethodName: "setFriendRemark",
			Handler:    _Friend_SetFriendRemark_Handler,
		},
		{
			MethodName: "importFriends",
			Handler:    _Friend_ImportFriends_Handler,
		},
		{
			MethodName: "getDesignatedFriends",
			Handler:    _Friend_GetDesignatedFriends_Handler,
		},
		{
			MethodName: "getPaginationFriends",
			Handler:    _Friend_GetPaginationFriends_Handler,
		},
		{
			MethodName: "getFriendIDs",
			Handler:    _Friend_GetFriendIDs_Handler,
		},
		{
			MethodName: "GetSpecifiedFriendsInfo",
			Handler:    _Friend_GetSpecifiedFriendsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friend/friend.proto",
}
