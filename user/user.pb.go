// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.0--rc1
// source: user/user.proto

package user

import (
	context "context"
	conversation "github.com/Meikwei/protocol/conversation"
	sdkws "github.com/Meikwei/protocol/sdkws"
	wrapperspb "github.com/Meikwei/protocol/wrapperspb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// getAllUserIDReq 请求获取所有用户ID
// pagination 分页参数
type GetAllUserIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkws.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
}

func (x *GetAllUserIDReq) Reset() {
	*x = GetAllUserIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUserIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserIDReq) ProtoMessage() {}

func (x *GetAllUserIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserIDReq.ProtoReflect.Descriptor instead.
func (*GetAllUserIDReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{0}
}

func (x *GetAllUserIDReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// getAllUserIDResp 获取所有用户ID的响应
// total 总用户数
// userIDs 用户ID列表
type GetAllUserIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	UserIDs []string `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *GetAllUserIDResp) Reset() {
	*x = GetAllUserIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUserIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserIDResp) ProtoMessage() {}

func (x *GetAllUserIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserIDResp.ProtoReflect.Descriptor instead.
func (*GetAllUserIDResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{1}
}

func (x *GetAllUserIDResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetAllUserIDResp) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

// accountCheckReq 请求检查多个账户状态
// checkUserIDs 需要检查的用户ID列表
type AccountCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckUserIDs []string `protobuf:"bytes,1,rep,name=checkUserIDs,proto3" json:"checkUserIDs"`
}

func (x *AccountCheckReq) Reset() {
	*x = AccountCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCheckReq) ProtoMessage() {}

func (x *AccountCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCheckReq.ProtoReflect.Descriptor instead.
func (*AccountCheckReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{2}
}

func (x *AccountCheckReq) GetCheckUserIDs() []string {
	if x != nil {
		return x.CheckUserIDs
	}
	return nil
}

// accountCheckResp 检查账户状态的响应
// results 单个用户状态的结果列表
type AccountCheckResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AccountCheckRespSingleUserStatus `protobuf:"bytes,1,rep,name=results,proto3" json:"results"`
}

func (x *AccountCheckResp) Reset() {
	*x = AccountCheckResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCheckResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCheckResp) ProtoMessage() {}

func (x *AccountCheckResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCheckResp.ProtoReflect.Descriptor instead.
func (*AccountCheckResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{3}
}

func (x *AccountCheckResp) GetResults() []*AccountCheckRespSingleUserStatus {
	if x != nil {
		return x.Results
	}
	return nil
}

// getDesignateUsersReq 请求获取指定用户信息
// userIDs 指定的用户ID列表
type GetDesignateUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *GetDesignateUsersReq) Reset() {
	*x = GetDesignateUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesignateUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesignateUsersReq) ProtoMessage() {}

func (x *GetDesignateUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesignateUsersReq.ProtoReflect.Descriptor instead.
func (*GetDesignateUsersReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{4}
}

func (x *GetDesignateUsersReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

// getDesignateUsersResp 获取指定用户信息的响应
// usersInfo 用户信息列表
type GetDesignateUsersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsersInfo []*sdkws.UserInfo `protobuf:"bytes,1,rep,name=usersInfo,proto3" json:"usersInfo"`
}

func (x *GetDesignateUsersResp) Reset() {
	*x = GetDesignateUsersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesignateUsersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesignateUsersResp) ProtoMessage() {}

func (x *GetDesignateUsersResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesignateUsersResp.ProtoReflect.Descriptor instead.
func (*GetDesignateUsersResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{5}
}

func (x *GetDesignateUsersResp) GetUsersInfo() []*sdkws.UserInfo {
	if x != nil {
		return x.UsersInfo
	}
	return nil
}

// updateUserInfoReq 更新用户信息的请求
// userInfo 要更新的用户信息
type UpdateUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *sdkws.UserInfo `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo"`
}

func (x *UpdateUserInfoReq) Reset() {
	*x = UpdateUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoReq) ProtoMessage() {}

func (x *UpdateUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateUserInfoReq) GetUserInfo() *sdkws.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// updateUserInfoResp 更新用户信息的响应（空响应）
type UpdateUserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateUserInfoResp) Reset() {
	*x = UpdateUserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoResp) ProtoMessage() {}

func (x *UpdateUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoResp.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{7}
}

// updateUserInfoExReq 更新扩展用户信息的请求
// userInfo 要更新的包含扩展信息的用户信息
type UpdateUserInfoExReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *sdkws.UserInfoWithEx `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo"`
}

func (x *UpdateUserInfoExReq) Reset() {
	*x = UpdateUserInfoExReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoExReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoExReq) ProtoMessage() {}

func (x *UpdateUserInfoExReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoExReq.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoExReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateUserInfoExReq) GetUserInfo() *sdkws.UserInfoWithEx {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// updateUserInfoExResp 更新扩展用户信息的响应（空响应）
type UpdateUserInfoExResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateUserInfoExResp) Reset() {
	*x = UpdateUserInfoExResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoExResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoExResp) ProtoMessage() {}

func (x *UpdateUserInfoExResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoExResp.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoExResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{9}
}

// setGlobalRecvMessageOptReq 设置全局接收消息选项的请求
// userID 用户ID
// globalRecvMsgOpt 全局接收消息选项
type SetGlobalRecvMessageOptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID           string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	GlobalRecvMsgOpt int32  `protobuf:"varint,3,opt,name=globalRecvMsgOpt,proto3" json:"globalRecvMsgOpt"`
}

func (x *SetGlobalRecvMessageOptReq) Reset() {
	*x = SetGlobalRecvMessageOptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGlobalRecvMessageOptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGlobalRecvMessageOptReq) ProtoMessage() {}

func (x *SetGlobalRecvMessageOptReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGlobalRecvMessageOptReq.ProtoReflect.Descriptor instead.
func (*SetGlobalRecvMessageOptReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{10}
}

func (x *SetGlobalRecvMessageOptReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetGlobalRecvMessageOptReq) GetGlobalRecvMsgOpt() int32 {
	if x != nil {
		return x.GlobalRecvMsgOpt
	}
	return 0
}

// setGlobalRecvMessageOptResp 设置全局接收消息选项的响应（空响应）
type SetGlobalRecvMessageOptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetGlobalRecvMessageOptResp) Reset() {
	*x = SetGlobalRecvMessageOptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGlobalRecvMessageOptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGlobalRecvMessageOptResp) ProtoMessage() {}

func (x *SetGlobalRecvMessageOptResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGlobalRecvMessageOptResp.ProtoReflect.Descriptor instead.
func (*SetGlobalRecvMessageOptResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{11}
}

// setConversationReq 设置会话属性的请求
// conversation 会话信息
// notificationType 通知类型
// operationID 操作ID
type SetConversationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversation     *conversation.Conversation `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation"`
	NotificationType int32                      `protobuf:"varint,2,opt,name=notificationType,proto3" json:"notificationType"`
	OperationID      string                     `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID"`
}

func (x *SetConversationReq) Reset() {
	*x = SetConversationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationReq) ProtoMessage() {}

func (x *SetConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationReq.ProtoReflect.Descriptor instead.
func (*SetConversationReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{12}
}

func (x *SetConversationReq) GetConversation() *conversation.Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *SetConversationReq) GetNotificationType() int32 {
	if x != nil {
		return x.NotificationType
	}
	return 0
}

func (x *SetConversationReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

// setConversationResp 设置会话属性的响应（空响应）
type SetConversationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetConversationResp) Reset() {
	*x = SetConversationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConversationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationResp) ProtoMessage() {}

func (x *SetConversationResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationResp.ProtoReflect.Descriptor instead.
func (*SetConversationResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{13}
}

// setRecvMsgOptReq 设置会话接收消息选项的请求
// ownerUserID 拥有者用户ID
// conversationID 会话ID
// recvMsgOpt 接收消息选项
// notificationType 通知类型
// operationID 操作ID
type SetRecvMsgOptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID      string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"`
	ConversationID   string `protobuf:"bytes,2,opt,name=conversationID,proto3" json:"conversationID"`
	RecvMsgOpt       int32  `protobuf:"varint,3,opt,name=recvMsgOpt,proto3" json:"recvMsgOpt"`
	NotificationType int32  `protobuf:"varint,4,opt,name=notificationType,proto3" json:"notificationType"`
	OperationID      string `protobuf:"bytes,5,opt,name=operationID,proto3" json:"operationID"`
}

func (x *SetRecvMsgOptReq) Reset() {
	*x = SetRecvMsgOptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRecvMsgOptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRecvMsgOptReq) ProtoMessage() {}

func (x *SetRecvMsgOptReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRecvMsgOptReq.ProtoReflect.Descriptor instead.
func (*SetRecvMsgOptReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{14}
}

func (x *SetRecvMsgOptReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *SetRecvMsgOptReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *SetRecvMsgOptReq) GetRecvMsgOpt() int32 {
	if x != nil {
		return x.RecvMsgOpt
	}
	return 0
}

func (x *SetRecvMsgOptReq) GetNotificationType() int32 {
	if x != nil {
		return x.NotificationType
	}
	return 0
}

func (x *SetRecvMsgOptReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

// setRecvMsgOptResp 设置会话接收消息选项的响应（空响应）
type SetRecvMsgOptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetRecvMsgOptResp) Reset() {
	*x = SetRecvMsgOptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRecvMsgOptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRecvMsgOptResp) ProtoMessage() {}

func (x *SetRecvMsgOptResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRecvMsgOptResp.ProtoReflect.Descriptor instead.
func (*SetRecvMsgOptResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{15}
}

// getConversationReq 获取会话信息的请求
// conversationID 会话ID
// ownerUserID 拥有者用户ID
// operationID 操作ID
type GetConversationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationID string `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	OwnerUserID    string `protobuf:"bytes,2,opt,name=ownerUserID,proto3" json:"ownerUserID"`
	OperationID    string `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID"`
}

func (x *GetConversationReq) Reset() {
	*x = GetConversationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationReq) ProtoMessage() {}

func (x *GetConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationReq.ProtoReflect.Descriptor instead.
func (*GetConversationReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{16}
}

func (x *GetConversationReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *GetConversationReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *GetConversationReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

// getConversationResp 获取会话信息的响应
// conversation 会话信息
type GetConversationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversation *conversation.Conversation `protobuf:"bytes,2,opt,name=conversation,proto3" json:"conversation"`
}

func (x *GetConversationResp) Reset() {
	*x = GetConversationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationResp) ProtoMessage() {}

func (x *GetConversationResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationResp.ProtoReflect.Descriptor instead.
func (*GetConversationResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{17}
}

func (x *GetConversationResp) GetConversation() *conversation.Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// getConversationsReq 请求获取多个会话信息的请求
// ownerUserID 拥有者用户ID
// conversationIDs 会话ID列表
// operationID 操作ID
type GetConversationsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID     string   `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"`
	ConversationIDs []string `protobuf:"bytes,2,rep,name=conversationIDs,proto3" json:"conversationIDs"`
	OperationID     string   `protobuf:"bytes,3,opt,name=operationID,proto3" json:"operationID"`
}

func (x *GetConversationsReq) Reset() {
	*x = GetConversationsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsReq) ProtoMessage() {}

func (x *GetConversationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsReq.ProtoReflect.Descriptor instead.
func (*GetConversationsReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{18}
}

func (x *GetConversationsReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *GetConversationsReq) GetConversationIDs() []string {
	if x != nil {
		return x.ConversationIDs
	}
	return nil
}

func (x *GetConversationsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

// getConversationsResp 获取多个会话信息的响应
// conversations 会话信息列表
type GetConversationsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversations []*conversation.Conversation `protobuf:"bytes,2,rep,name=conversations,proto3" json:"conversations"`
}

func (x *GetConversationsResp) Reset() {
	*x = GetConversationsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConversationsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationsResp) ProtoMessage() {}

func (x *GetConversationsResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationsResp.ProtoReflect.Descriptor instead.
func (*GetConversationsResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{19}
}

func (x *GetConversationsResp) GetConversations() []*conversation.Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

// getAllConversationsReq 请求获取所有会话信息的请求
// ownerUserID 拥有者用户ID
// operationID 操作ID
type GetAllConversationsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"`
	OperationID string `protobuf:"bytes,2,opt,name=operationID,proto3" json:"operationID"`
}

func (x *GetAllConversationsReq) Reset() {
	*x = GetAllConversationsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllConversationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllConversationsReq) ProtoMessage() {}

func (x *GetAllConversationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllConversationsReq.ProtoReflect.Descriptor instead.
func (*GetAllConversationsReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{20}
}

func (x *GetAllConversationsReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *GetAllConversationsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

// getAllConversationsResp 获取所有会话信息的响应
// conversations 所有会话信息列表
type GetAllConversationsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversations []*conversation.Conversation `protobuf:"bytes,2,rep,name=conversations,proto3" json:"conversations"`
}

func (x *GetAllConversationsResp) Reset() {
	*x = GetAllConversationsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllConversationsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllConversationsResp) ProtoMessage() {}

func (x *GetAllConversationsResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllConversationsResp.ProtoReflect.Descriptor instead.
func (*GetAllConversationsResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{21}
}

func (x *GetAllConversationsResp) GetConversations() []*conversation.Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

// 批量设置对话信息请求
type BatchSetConversationsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversations    []*conversation.Conversation `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations"`        // 对话列表
	OwnerUserID      string                       `protobuf:"bytes,2,opt,name=OwnerUserID,proto3" json:"OwnerUserID"`            // 用户ID
	NotificationType int32                        `protobuf:"varint,3,opt,name=notificationType,proto3" json:"notificationType"` // 通知类型
	OperationID      string                       `protobuf:"bytes,4,opt,name=OperationID,proto3" json:"OperationID"`            // 操作ID
}

func (x *BatchSetConversationsReq) Reset() {
	*x = BatchSetConversationsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetConversationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetConversationsReq) ProtoMessage() {}

func (x *BatchSetConversationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetConversationsReq.ProtoReflect.Descriptor instead.
func (*BatchSetConversationsReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{22}
}

func (x *BatchSetConversationsReq) GetConversations() []*conversation.Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *BatchSetConversationsReq) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *BatchSetConversationsReq) GetNotificationType() int32 {
	if x != nil {
		return x.NotificationType
	}
	return 0
}

func (x *BatchSetConversationsReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

// 批量设置对话信息响应
type BatchSetConversationsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success []string `protobuf:"bytes,2,rep,name=Success,proto3" json:"Success"` // 成功的对话ID列表
	Failed  []string `protobuf:"bytes,3,rep,name=Failed,proto3" json:"Failed"`   // 失败的对话ID列表
}

func (x *BatchSetConversationsResp) Reset() {
	*x = BatchSetConversationsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetConversationsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetConversationsResp) ProtoMessage() {}

func (x *BatchSetConversationsResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetConversationsResp.ProtoReflect.Descriptor instead.
func (*BatchSetConversationsResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{23}
}

func (x *BatchSetConversationsResp) GetSuccess() []string {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *BatchSetConversationsResp) GetFailed() []string {
	if x != nil {
		return x.Failed
	}
	return nil
}

// 获取分页用户列表请求
type GetPaginationUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkws.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"` // 分页信息
	UserID     string                   `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID"`         // 用户ID
	NickName   string                   `protobuf:"bytes,4,opt,name=nickName,proto3" json:"nickName"`     // 用户昵称
}

func (x *GetPaginationUsersReq) Reset() {
	*x = GetPaginationUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaginationUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaginationUsersReq) ProtoMessage() {}

func (x *GetPaginationUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaginationUsersReq.ProtoReflect.Descriptor instead.
func (*GetPaginationUsersReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{24}
}

func (x *GetPaginationUsersReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetPaginationUsersReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetPaginationUsersReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

// 获取分页用户列表响应
type GetPaginationUsersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32             `protobuf:"varint,1,opt,name=total,proto3" json:"total"` // 总数
	Users []*sdkws.UserInfo `protobuf:"bytes,2,rep,name=users,proto3" json:"users"`  // 用户信息列表
}

func (x *GetPaginationUsersResp) Reset() {
	*x = GetPaginationUsersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaginationUsersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaginationUsersResp) ProtoMessage() {}

func (x *GetPaginationUsersResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaginationUsersResp.ProtoReflect.Descriptor instead.
func (*GetPaginationUsersResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{25}
}

func (x *GetPaginationUsersResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetPaginationUsersResp) GetUsers() []*sdkws.UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

// 用户注册请求
type UserRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret string            `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret"` // 密码
	Users  []*sdkws.UserInfo `protobuf:"bytes,2,rep,name=users,proto3" json:"users"`   // 用户信息列表
}

func (x *UserRegisterReq) Reset() {
	*x = UserRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterReq) ProtoMessage() {}

func (x *UserRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterReq.ProtoReflect.Descriptor instead.
func (*UserRegisterReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{26}
}

func (x *UserRegisterReq) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *UserRegisterReq) GetUsers() []*sdkws.UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

// 用户注册响应
type UserRegisterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserRegisterResp) Reset() {
	*x = UserRegisterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterResp) ProtoMessage() {}

func (x *UserRegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterResp.ProtoReflect.Descriptor instead.
func (*UserRegisterResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{27}
}

// 获取全局接收消息选项请求
type GetGlobalRecvMessageOptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // 用户ID
}

func (x *GetGlobalRecvMessageOptReq) Reset() {
	*x = GetGlobalRecvMessageOptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGlobalRecvMessageOptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalRecvMessageOptReq) ProtoMessage() {}

func (x *GetGlobalRecvMessageOptReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalRecvMessageOptReq.ProtoReflect.Descriptor instead.
func (*GetGlobalRecvMessageOptReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{28}
}

func (x *GetGlobalRecvMessageOptReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 获取全局接收消息选项响应
type GetGlobalRecvMessageOptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalRecvMsgOpt int32 `protobuf:"varint,1,opt,name=globalRecvMsgOpt,proto3" json:"globalRecvMsgOpt"` // 全局接收消息选项
}

func (x *GetGlobalRecvMessageOptResp) Reset() {
	*x = GetGlobalRecvMessageOptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGlobalRecvMessageOptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalRecvMessageOptResp) ProtoMessage() {}

func (x *GetGlobalRecvMessageOptResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalRecvMessageOptResp.ProtoReflect.Descriptor instead.
func (*GetGlobalRecvMessageOptResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{29}
}

func (x *GetGlobalRecvMessageOptResp) GetGlobalRecvMsgOpt() int32 {
	if x != nil {
		return x.GlobalRecvMsgOpt
	}
	return 0
}

// 用户注册数量请求
type UserRegisterCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start"` // 开始时间
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end"`     // 结束时间
}

func (x *UserRegisterCountReq) Reset() {
	*x = UserRegisterCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegisterCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterCountReq) ProtoMessage() {}

func (x *UserRegisterCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterCountReq.ProtoReflect.Descriptor instead.
func (*UserRegisterCountReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{30}
}

func (x *UserRegisterCountReq) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *UserRegisterCountReq) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

// 用户注册数量响应
type UserRegisterCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total"`                                                                                         // 总数量
	Before int64            `protobuf:"varint,2,opt,name=before,proto3" json:"before"`                                                                                       // 之前的数量
	Count  map[string]int64 `protobuf:"bytes,3,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 按类型统计的数量
}

func (x *UserRegisterCountResp) Reset() {
	*x = UserRegisterCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegisterCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterCountResp) ProtoMessage() {}

func (x *UserRegisterCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterCountResp.ProtoReflect.Descriptor instead.
func (*UserRegisterCountResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{31}
}

func (x *UserRegisterCountResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserRegisterCountResp) GetBefore() int64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *UserRegisterCountResp) GetCount() map[string]int64 {
	if x != nil {
		return x.Count
	}
	return nil
}

// 订阅或取消用户状态请求
type SubscribeOrCancelUsersStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`   // 用户ID
	UserIDs []string `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs"` // 目标用户ID列表
	Genre   int32    `protobuf:"varint,3,opt,name=genre,proto3" json:"genre"`    // 类型
}

func (x *SubscribeOrCancelUsersStatusReq) Reset() {
	*x = SubscribeOrCancelUsersStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeOrCancelUsersStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrCancelUsersStatusReq) ProtoMessage() {}

func (x *SubscribeOrCancelUsersStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrCancelUsersStatusReq.ProtoReflect.Descriptor instead.
func (*SubscribeOrCancelUsersStatusReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{32}
}

func (x *SubscribeOrCancelUsersStatusReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SubscribeOrCancelUsersStatusReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *SubscribeOrCancelUsersStatusReq) GetGenre() int32 {
	if x != nil {
		return x.Genre
	}
	return 0
}

// 订阅或取消用户状态响应
type SubscribeOrCancelUsersStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusList []*OnlineStatus `protobuf:"bytes,1,rep,name=statusList,proto3" json:"statusList"` // 状态列表
}

func (x *SubscribeOrCancelUsersStatusResp) Reset() {
	*x = SubscribeOrCancelUsersStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeOrCancelUsersStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrCancelUsersStatusResp) ProtoMessage() {}

func (x *SubscribeOrCancelUsersStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrCancelUsersStatusResp.ProtoReflect.Descriptor instead.
func (*SubscribeOrCancelUsersStatusResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{33}
}

func (x *SubscribeOrCancelUsersStatusResp) GetStatusList() []*OnlineStatus {
	if x != nil {
		return x.StatusList
	}
	return nil
}

// 获取订阅用户状态请求
type GetSubscribeUsersStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // 用户ID
}

func (x *GetSubscribeUsersStatusReq) Reset() {
	*x = GetSubscribeUsersStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscribeUsersStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscribeUsersStatusReq) ProtoMessage() {}

func (x *GetSubscribeUsersStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscribeUsersStatusReq.ProtoReflect.Descriptor instead.
func (*GetSubscribeUsersStatusReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{34}
}

func (x *GetSubscribeUsersStatusReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 获取订阅用户状态响应
type GetSubscribeUsersStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusList []*OnlineStatus `protobuf:"bytes,1,rep,name=statusList,proto3" json:"statusList"` // 状态列表
}

func (x *GetSubscribeUsersStatusResp) Reset() {
	*x = GetSubscribeUsersStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubscribeUsersStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscribeUsersStatusResp) ProtoMessage() {}

func (x *GetSubscribeUsersStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscribeUsersStatusResp.ProtoReflect.Descriptor instead.
func (*GetSubscribeUsersStatusResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{35}
}

func (x *GetSubscribeUsersStatusResp) GetStatusList() []*OnlineStatus {
	if x != nil {
		return x.StatusList
	}
	return nil
}

// 在线状态信息
type OnlineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      string  `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`                   // 用户ID
	Status      int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status"`                  // 状态
	PlatformIDs []int32 `protobuf:"varint,3,rep,packed,name=platformIDs,proto3" json:"platformIDs"` // 平台ID列表
}

func (x *OnlineStatus) Reset() {
	*x = OnlineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineStatus) ProtoMessage() {}

func (x *OnlineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineStatus.ProtoReflect.Descriptor instead.
func (*OnlineStatus) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{36}
}

func (x *OnlineStatus) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OnlineStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OnlineStatus) GetPlatformIDs() []int32 {
	if x != nil {
		return x.PlatformIDs
	}
	return nil
}

// 获取用户状态请求
type GetUserStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`   // 用户ID
	UserIDs []string `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs"` // 目标用户ID列表
}

func (x *GetUserStatusReq) Reset() {
	*x = GetUserStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserStatusReq) ProtoMessage() {}

func (x *GetUserStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserStatusReq.ProtoReflect.Descriptor instead.
func (*GetUserStatusReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{37}
}

func (x *GetUserStatusReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserStatusReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

// 获取用户状态响应
type GetUserStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusList []*OnlineStatus `protobuf:"bytes,1,rep,name=statusList,proto3" json:"statusList"` // 状态列表
}

func (x *GetUserStatusResp) Reset() {
	*x = GetUserStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserStatusResp) ProtoMessage() {}

func (x *GetUserStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserStatusResp.ProtoReflect.Descriptor instead.
func (*GetUserStatusResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{38}
}

func (x *GetUserStatusResp) GetStatusList() []*OnlineStatus {
	if x != nil {
		return x.StatusList
	}
	return nil
}

// 设置用户状态请求
type SetUserStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`              // 用户ID
	Status       int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status"`             // 状态
	PlatformID   int32  `protobuf:"varint,3,opt,name=platformID,proto3" json:"platformID"`     // 平台ID
	ConnID       string `protobuf:"bytes,4,opt,name=connID,proto3" json:"connID"`              // 连接ID
	IsBackground bool   `protobuf:"varint,5,opt,name=isBackground,proto3" json:"isBackground"` // 是否后台
}

func (x *SetUserStatusReq) Reset() {
	*x = SetUserStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserStatusReq) ProtoMessage() {}

func (x *SetUserStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserStatusReq.ProtoReflect.Descriptor instead.
func (*SetUserStatusReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{39}
}

func (x *SetUserStatusReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetUserStatusReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SetUserStatusReq) GetPlatformID() int32 {
	if x != nil {
		return x.PlatformID
	}
	return 0
}

func (x *SetUserStatusReq) GetConnID() string {
	if x != nil {
		return x.ConnID
	}
	return ""
}

func (x *SetUserStatusReq) GetIsBackground() bool {
	if x != nil {
		return x.IsBackground
	}
	return false
}

// 设置用户状态响应
type SetUserStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetUserStatusResp) Reset() {
	*x = SetUserStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserStatusResp) ProtoMessage() {}

func (x *SetUserStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserStatusResp.ProtoReflect.Descriptor instead.
func (*SetUserStatusResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{40}
}

// 处理用户指令添加请求
type ProcessUserCommandAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string                  `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // 用户ID
	Type   int32                   `protobuf:"varint,2,opt,name=type,proto3" json:"type"`    // 指令类型
	Uuid   string                  `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid"`     // UUID
	Value  *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=value,proto3" json:"value"`   // 值
	Ex     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=ex,proto3" json:"ex"`         // 额外信息
}

func (x *ProcessUserCommandAddReq) Reset() {
	*x = ProcessUserCommandAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessUserCommandAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessUserCommandAddReq) ProtoMessage() {}

func (x *ProcessUserCommandAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessUserCommandAddReq.ProtoReflect.Descriptor instead.
func (*ProcessUserCommandAddReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{41}
}

func (x *ProcessUserCommandAddReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ProcessUserCommandAddReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProcessUserCommandAddReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProcessUserCommandAddReq) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ProcessUserCommandAddReq) GetEx() *wrapperspb.StringValue {
	if x != nil {
		return x.Ex
	}
	return nil
}

// 处理用户指令添加响应
type ProcessUserCommandAddResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcessUserCommandAddResp) Reset() {
	*x = ProcessUserCommandAddResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessUserCommandAddResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessUserCommandAddResp) ProtoMessage() {}

func (x *ProcessUserCommandAddResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessUserCommandAddResp.ProtoReflect.Descriptor instead.
func (*ProcessUserCommandAddResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{42}
}

// 处理用户指令删除请求
type ProcessUserCommandDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // 用户ID
	Type   int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type"`    // 指令类型
	Uuid   string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid"`     // UUID
}

func (x *ProcessUserCommandDeleteReq) Reset() {
	*x = ProcessUserCommandDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessUserCommandDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessUserCommandDeleteReq) ProtoMessage() {}

func (x *ProcessUserCommandDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessUserCommandDeleteReq.ProtoReflect.Descriptor instead.
func (*ProcessUserCommandDeleteReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{43}
}

func (x *ProcessUserCommandDeleteReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ProcessUserCommandDeleteReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProcessUserCommandDeleteReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// 处理用户指令删除响应
type ProcessUserCommandDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcessUserCommandDeleteResp) Reset() {
	*x = ProcessUserCommandDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessUserCommandDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessUserCommandDeleteResp) ProtoMessage() {}

func (x *ProcessUserCommandDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessUserCommandDeleteResp.ProtoReflect.Descriptor instead.
func (*ProcessUserCommandDeleteResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{44}
}

// 处理用户指令更新请求
type ProcessUserCommandUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string                  `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // 用户ID
	Type   int32                   `protobuf:"varint,2,opt,name=type,proto3" json:"type"`    // 指令类型
	Uuid   string                  `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid"`     // UUID
	Value  *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=value,proto3" json:"value"`   // 值
	Ex     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=ex,proto3" json:"ex"`         // 额外信息
}

func (x *ProcessUserCommandUpdateReq) Reset() {
	*x = ProcessUserCommandUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessUserCommandUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessUserCommandUpdateReq) ProtoMessage() {}

func (x *ProcessUserCommandUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessUserCommandUpdateReq.ProtoReflect.Descriptor instead.
func (*ProcessUserCommandUpdateReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{45}
}

func (x *ProcessUserCommandUpdateReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ProcessUserCommandUpdateReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProcessUserCommandUpdateReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProcessUserCommandUpdateReq) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ProcessUserCommandUpdateReq) GetEx() *wrapperspb.StringValue {
	if x != nil {
		return x.Ex
	}
	return nil
}

// 处理用户指令更新响应
type ProcessUserCommandUpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcessUserCommandUpdateResp) Reset() {
	*x = ProcessUserCommandUpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessUserCommandUpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessUserCommandUpdateResp) ProtoMessage() {}

func (x *ProcessUserCommandUpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessUserCommandUpdateResp.ProtoReflect.Descriptor instead.
func (*ProcessUserCommandUpdateResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{46}
}

// 获取用户指令请求
type ProcessUserCommandGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // 用户ID
	Type   int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type"`    // 指令类型
}

func (x *ProcessUserCommandGetReq) Reset() {
	*x = ProcessUserCommandGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessUserCommandGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessUserCommandGetReq) ProtoMessage() {}

func (x *ProcessUserCommandGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessUserCommandGetReq.ProtoReflect.Descriptor instead.
func (*ProcessUserCommandGetReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{47}
}

func (x *ProcessUserCommandGetReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ProcessUserCommandGetReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 指令信息响应
type CommandInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type"`             // 指令类型
	CreateTime int64  `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime"` // 创建时间
	Uuid       string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid"`              // UUID
	Value      string `protobuf:"bytes,4,opt,name=value,proto3" json:"value"`            // 值
	Ex         string `protobuf:"bytes,5,opt,name=ex,proto3" json:"ex"`                  // 额外信息
}

func (x *CommandInfoResp) Reset() {
	*x = CommandInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInfoResp) ProtoMessage() {}

func (x *CommandInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInfoResp.ProtoReflect.Descriptor instead.
func (*CommandInfoResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{48}
}

func (x *CommandInfoResp) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CommandInfoResp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CommandInfoResp) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CommandInfoResp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CommandInfoResp) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

// 获取用户指令响应
type ProcessUserCommandGetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandResp []*CommandInfoResp `protobuf:"bytes,1,rep,name=CommandResp,proto3" json:"CommandResp"` // 指令列表响应
}

func (x *ProcessUserCommandGetResp) Reset() {
	*x = ProcessUserCommandGetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessUserCommandGetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessUserCommandGetResp) ProtoMessage() {}

func (x *ProcessUserCommandGetResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessUserCommandGetResp.ProtoReflect.Descriptor instead.
func (*ProcessUserCommandGetResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{49}
}

func (x *ProcessUserCommandGetResp) GetCommandResp() []*CommandInfoResp {
	if x != nil {
		return x.CommandResp
	}
	return nil
}

// 获取所有用户指令请求
type ProcessUserCommandGetAllReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // 用户ID
}

func (x *ProcessUserCommandGetAllReq) Reset() {
	*x = ProcessUserCommandGetAllReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessUserCommandGetAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessUserCommandGetAllReq) ProtoMessage() {}

func (x *ProcessUserCommandGetAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessUserCommandGetAllReq.ProtoReflect.Descriptor instead.
func (*ProcessUserCommandGetAllReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{50}
}

func (x *ProcessUserCommandGetAllReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 所有指令信息响应
type AllCommandInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type"`             // 指令类型
	CreateTime int64  `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime"` // 创建时间
	Uuid       string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid"`              // UUID
	Value      string `protobuf:"bytes,4,opt,name=value,proto3" json:"value"`            // 值
	Ex         string `protobuf:"bytes,5,opt,name=ex,proto3" json:"ex"`                  // 额外信息
}

func (x *AllCommandInfoResp) Reset() {
	*x = AllCommandInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllCommandInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllCommandInfoResp) ProtoMessage() {}

func (x *AllCommandInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllCommandInfoResp.ProtoReflect.Descriptor instead.
func (*AllCommandInfoResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{51}
}

func (x *AllCommandInfoResp) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AllCommandInfoResp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AllCommandInfoResp) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AllCommandInfoResp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AllCommandInfoResp) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

// 获取所有用户指令响应
type ProcessUserCommandGetAllResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandResp []*AllCommandInfoResp `protobuf:"bytes,1,rep,name=CommandResp,proto3" json:"CommandResp"` // 所有指令列表响应
}

func (x *ProcessUserCommandGetAllResp) Reset() {
	*x = ProcessUserCommandGetAllResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessUserCommandGetAllResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessUserCommandGetAllResp) ProtoMessage() {}

func (x *ProcessUserCommandGetAllResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessUserCommandGetAllResp.ProtoReflect.Descriptor instead.
func (*ProcessUserCommandGetAllResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{52}
}

func (x *ProcessUserCommandGetAllResp) GetCommandResp() []*AllCommandInfoResp {
	if x != nil {
		return x.CommandResp
	}
	return nil
}

// 添加通知账号请求
type AddNotificationAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`     // 用户ID
	NickName string `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName"` // 昵称
	FaceURL  string `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`   // 头像URL
}

func (x *AddNotificationAccountReq) Reset() {
	*x = AddNotificationAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNotificationAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNotificationAccountReq) ProtoMessage() {}

func (x *AddNotificationAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNotificationAccountReq.ProtoReflect.Descriptor instead.
func (*AddNotificationAccountReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{53}
}

func (x *AddNotificationAccountReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AddNotificationAccountReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *AddNotificationAccountReq) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

// 添加通知账号响应
type AddNotificationAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`     // 用户ID
	FaceURL  string `protobuf:"bytes,2,opt,name=faceURL,proto3" json:"faceURL"`   // 头像URL
	NickName string `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName"` // 昵称
}

func (x *AddNotificationAccountResp) Reset() {
	*x = AddNotificationAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNotificationAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNotificationAccountResp) ProtoMessage() {}

func (x *AddNotificationAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNotificationAccountResp.ProtoReflect.Descriptor instead.
func (*AddNotificationAccountResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{54}
}

func (x *AddNotificationAccountResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AddNotificationAccountResp) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *AddNotificationAccountResp) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

// 更新通知账号信息请求
type UpdateNotificationAccountInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`     // 用户ID
	FaceURL  string `protobuf:"bytes,2,opt,name=faceURL,proto3" json:"faceURL"`   // 头像URL
	NickName string `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName"` // 昵称
}

func (x *UpdateNotificationAccountInfoReq) Reset() {
	*x = UpdateNotificationAccountInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotificationAccountInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotificationAccountInfoReq) ProtoMessage() {}

func (x *UpdateNotificationAccountInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotificationAccountInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateNotificationAccountInfoReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{55}
}

func (x *UpdateNotificationAccountInfoReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateNotificationAccountInfoReq) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *UpdateNotificationAccountInfoReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

// 更新通知账号信息响应
type UpdateNotificationAccountInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNotificationAccountInfoResp) Reset() {
	*x = UpdateNotificationAccountInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotificationAccountInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotificationAccountInfoResp) ProtoMessage() {}

func (x *UpdateNotificationAccountInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotificationAccountInfoResp.ProtoReflect.Descriptor instead.
func (*UpdateNotificationAccountInfoResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{56}
}

// 搜索通知账号请求
type SearchNotificationAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`       // 关键词
	Pagination *sdkws.RequestPagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination"` // 分页信息
}

func (x *SearchNotificationAccountReq) Reset() {
	*x = SearchNotificationAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNotificationAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNotificationAccountReq) ProtoMessage() {}

func (x *SearchNotificationAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNotificationAccountReq.ProtoReflect.Descriptor instead.
func (*SearchNotificationAccountReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{57}
}

func (x *SearchNotificationAccountReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchNotificationAccountReq) GetPagination() *sdkws.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// 通知账号信息
type NotificationAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`     // 用户ID
	FaceURL  string `protobuf:"bytes,2,opt,name=faceURL,proto3" json:"faceURL"`   // 头像URL
	NickName string `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName"` // 昵称
}

func (x *NotificationAccountInfo) Reset() {
	*x = NotificationAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationAccountInfo) ProtoMessage() {}

func (x *NotificationAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationAccountInfo.ProtoReflect.Descriptor instead.
func (*NotificationAccountInfo) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{58}
}

func (x *NotificationAccountInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *NotificationAccountInfo) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *NotificationAccountInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

// 搜索通知账号响应
type SearchNotificationAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total                int64                      `protobuf:"varint,1,opt,name=total,proto3" json:"total"`                              // 总数
	NotificationAccounts []*NotificationAccountInfo `protobuf:"bytes,2,rep,name=notificationAccounts,proto3" json:"notificationAccounts"` // 通知账号列表
}

func (x *SearchNotificationAccountResp) Reset() {
	*x = SearchNotificationAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchNotificationAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchNotificationAccountResp) ProtoMessage() {}

func (x *SearchNotificationAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchNotificationAccountResp.ProtoReflect.Descriptor instead.
func (*SearchNotificationAccountResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{59}
}

func (x *SearchNotificationAccountResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchNotificationAccountResp) GetNotificationAccounts() []*NotificationAccountInfo {
	if x != nil {
		return x.NotificationAccounts
	}
	return nil
}

// 获取通知账号请求
type GetNotificationAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // 用户ID
}

func (x *GetNotificationAccountReq) Reset() {
	*x = GetNotificationAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotificationAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationAccountReq) ProtoMessage() {}

func (x *GetNotificationAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationAccountReq.ProtoReflect.Descriptor instead.
func (*GetNotificationAccountReq) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{60}
}

func (x *GetNotificationAccountReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 获取通知账号响应
type GetNotificationAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNotificationAccountResp) Reset() {
	*x = GetNotificationAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotificationAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationAccountResp) ProtoMessage() {}

func (x *GetNotificationAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationAccountResp.ProtoReflect.Descriptor instead.
func (*GetNotificationAccountResp) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{61}
}

type AccountCheckRespSingleUserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`               // 用户ID
	AccountStatus string `protobuf:"bytes,2,opt,name=accountStatus,proto3" json:"accountStatus"` // 账户状态
}

func (x *AccountCheckRespSingleUserStatus) Reset() {
	*x = AccountCheckRespSingleUserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_user_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCheckRespSingleUserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCheckRespSingleUserStatus) ProtoMessage() {}

func (x *AccountCheckRespSingleUserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_user_user_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCheckRespSingleUserStatus.ProtoReflect.Descriptor instead.
func (*AccountCheckRespSingleUserStatus) Descriptor() ([]byte, []int) {
	return file_user_user_proto_rawDescGZIP(), []int{3, 0}
}

func (x *AccountCheckRespSingleUserStatus) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AccountCheckRespSingleUserStatus) GetAccountStatus() string {
	if x != nil {
		return x.AccountStatus
	}
	return ""
}

var File_user_user_proto protoreflect.FileDescriptor

var file_user_user_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x11, 0x73,
	0x64, 0x6b, 0x77, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51,
	0x0a, 0x0f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x42, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x35, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0xad, 0x01, 0x0a,
	0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x50, 0x0a, 0x10, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x30, 0x0a, 0x14,
	0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x4c,
	0x0a, 0x15, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x65, 0x74,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a, 0x11,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4e, 0x0a, 0x13, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x52, 0x65,
	0x71, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x60, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73,
	0x67, 0x4f, 0x70, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x15,
	0x0a, 0x13, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f,
	0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x76, 0x4d, 0x73,
	0x67, 0x4f, 0x70, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x22, 0x13, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67,
	0x4f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x13, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x5e, 0x0a,
	0x14, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x65, 0x74, 0x69, 0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c, 0x0a,
	0x16, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x61, 0x0a, 0x17, 0x67,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd2,
	0x01, 0x0a, 0x18, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x4d, 0x0a, 0x19, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x5b, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x56, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x34, 0x0a, 0x1a, 0x67, 0x65, 0x74,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x49, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a,
	0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f,
	0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x22, 0x3e, 0x0a, 0x14, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x15, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x69, 0x0a, 0x1f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x22, 0x5c, 0x0a, 0x20, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x1a, 0x67, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x57, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x73, 0x22, 0x44, 0x0a, 0x10, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x22, 0x4d, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x65, 0x74, 0x69,
	0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x9e, 0x01, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x22, 0x13, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x65, 0x78, 0x22, 0x1b, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x5d, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x1e,
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0xbd,
	0x01, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x65, 0x78, 0x22, 0x1e,
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x46,
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0x5a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x65, 0x74, 0x69,
	0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x35, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22,
	0x60, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x40, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x69, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x22, 0x6a, 0x0a, 0x1a,
	0x61, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x78, 0x0a, 0x1c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x17, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x14, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x1c, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xd6, 0x11, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x58, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x0e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x61, 0x65,
	0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x65, 0x74,
	0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x10, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x12, 0x1f,
	0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x6a, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x12, 0x26, 0x2e, 0x61,
	0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a,
	0x17, 0x67, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x67, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x67, 0x65,
	0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x61, 0x65, 0x74, 0x69,
	0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x65, 0x74,
	0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x67, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x1b, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0c,
	0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x61,
	0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x65, 0x74, 0x69,
	0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x61,
	0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x79, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2b, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2c,
	0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a, 0x17,
	0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x67, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x65, 0x74, 0x69,
	0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x12, 0x24, 0x2e,
	0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6d, 0x0a, 0x18, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6d, 0x0a, 0x18, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65,
	0x74, 0x12, 0x24, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6d,
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x27, 0x2e, 0x61, 0x65, 0x74,
	0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67, 0x0a,
	0x16, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x64, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7c, 0x0a, 0x1d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x70, 0x0a, 0x19, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x61, 0x65,
	0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x67, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x65, 0x74, 0x69, 0x6d, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42,
	0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x65,
	0x69, 0x6b, 0x77, 0x65, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_user_proto_rawDescOnce sync.Once
	file_user_user_proto_rawDescData = file_user_user_proto_rawDesc
)

func file_user_user_proto_rawDescGZIP() []byte {
	file_user_user_proto_rawDescOnce.Do(func() {
		file_user_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_user_proto_rawDescData)
	})
	return file_user_user_proto_rawDescData
}

var file_user_user_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_user_user_proto_goTypes = []interface{}{
	(*GetAllUserIDReq)(nil),                   // 0: aetim.user.getAllUserIDReq
	(*GetAllUserIDResp)(nil),                  // 1: aetim.user.getAllUserIDResp
	(*AccountCheckReq)(nil),                   // 2: aetim.user.accountCheckReq
	(*AccountCheckResp)(nil),                  // 3: aetim.user.accountCheckResp
	(*GetDesignateUsersReq)(nil),              // 4: aetim.user.getDesignateUsersReq
	(*GetDesignateUsersResp)(nil),             // 5: aetim.user.getDesignateUsersResp
	(*UpdateUserInfoReq)(nil),                 // 6: aetim.user.updateUserInfoReq
	(*UpdateUserInfoResp)(nil),                // 7: aetim.user.updateUserInfoResp
	(*UpdateUserInfoExReq)(nil),               // 8: aetim.user.updateUserInfoExReq
	(*UpdateUserInfoExResp)(nil),              // 9: aetim.user.updateUserInfoExResp
	(*SetGlobalRecvMessageOptReq)(nil),        // 10: aetim.user.setGlobalRecvMessageOptReq
	(*SetGlobalRecvMessageOptResp)(nil),       // 11: aetim.user.setGlobalRecvMessageOptResp
	(*SetConversationReq)(nil),                // 12: aetim.user.setConversationReq
	(*SetConversationResp)(nil),               // 13: aetim.user.setConversationResp
	(*SetRecvMsgOptReq)(nil),                  // 14: aetim.user.setRecvMsgOptReq
	(*SetRecvMsgOptResp)(nil),                 // 15: aetim.user.setRecvMsgOptResp
	(*GetConversationReq)(nil),                // 16: aetim.user.getConversationReq
	(*GetConversationResp)(nil),               // 17: aetim.user.getConversationResp
	(*GetConversationsReq)(nil),               // 18: aetim.user.getConversationsReq
	(*GetConversationsResp)(nil),              // 19: aetim.user.getConversationsResp
	(*GetAllConversationsReq)(nil),            // 20: aetim.user.getAllConversationsReq
	(*GetAllConversationsResp)(nil),           // 21: aetim.user.getAllConversationsResp
	(*BatchSetConversationsReq)(nil),          // 22: aetim.user.batchSetConversationsReq
	(*BatchSetConversationsResp)(nil),         // 23: aetim.user.batchSetConversationsResp
	(*GetPaginationUsersReq)(nil),             // 24: aetim.user.getPaginationUsersReq
	(*GetPaginationUsersResp)(nil),            // 25: aetim.user.getPaginationUsersResp
	(*UserRegisterReq)(nil),                   // 26: aetim.user.userRegisterReq
	(*UserRegisterResp)(nil),                  // 27: aetim.user.userRegisterResp
	(*GetGlobalRecvMessageOptReq)(nil),        // 28: aetim.user.getGlobalRecvMessageOptReq
	(*GetGlobalRecvMessageOptResp)(nil),       // 29: aetim.user.getGlobalRecvMessageOptResp
	(*UserRegisterCountReq)(nil),              // 30: aetim.user.userRegisterCountReq
	(*UserRegisterCountResp)(nil),             // 31: aetim.user.userRegisterCountResp
	(*SubscribeOrCancelUsersStatusReq)(nil),   // 32: aetim.user.subscribeOrCancelUsersStatusReq
	(*SubscribeOrCancelUsersStatusResp)(nil),  // 33: aetim.user.subscribeOrCancelUsersStatusResp
	(*GetSubscribeUsersStatusReq)(nil),        // 34: aetim.user.getSubscribeUsersStatusReq
	(*GetSubscribeUsersStatusResp)(nil),       // 35: aetim.user.getSubscribeUsersStatusResp
	(*OnlineStatus)(nil),                      // 36: aetim.user.onlineStatus
	(*GetUserStatusReq)(nil),                  // 37: aetim.user.getUserStatusReq
	(*GetUserStatusResp)(nil),                 // 38: aetim.user.getUserStatusResp
	(*SetUserStatusReq)(nil),                  // 39: aetim.user.setUserStatusReq
	(*SetUserStatusResp)(nil),                 // 40: aetim.user.setUserStatusResp
	(*ProcessUserCommandAddReq)(nil),          // 41: aetim.user.processUserCommandAddReq
	(*ProcessUserCommandAddResp)(nil),         // 42: aetim.user.processUserCommandAddResp
	(*ProcessUserCommandDeleteReq)(nil),       // 43: aetim.user.processUserCommandDeleteReq
	(*ProcessUserCommandDeleteResp)(nil),      // 44: aetim.user.processUserCommandDeleteResp
	(*ProcessUserCommandUpdateReq)(nil),       // 45: aetim.user.processUserCommandUpdateReq
	(*ProcessUserCommandUpdateResp)(nil),      // 46: aetim.user.processUserCommandUpdateResp
	(*ProcessUserCommandGetReq)(nil),          // 47: aetim.user.processUserCommandGetReq
	(*CommandInfoResp)(nil),                   // 48: aetim.user.CommandInfoResp
	(*ProcessUserCommandGetResp)(nil),         // 49: aetim.user.processUserCommandGetResp
	(*ProcessUserCommandGetAllReq)(nil),       // 50: aetim.user.processUserCommandGetAllReq
	(*AllCommandInfoResp)(nil),                // 51: aetim.user.AllCommandInfoResp
	(*ProcessUserCommandGetAllResp)(nil),      // 52: aetim.user.processUserCommandGetAllResp
	(*AddNotificationAccountReq)(nil),         // 53: aetim.user.addNotificationAccountReq
	(*AddNotificationAccountResp)(nil),        // 54: aetim.user.addNotificationAccountResp
	(*UpdateNotificationAccountInfoReq)(nil),  // 55: aetim.user.updateNotificationAccountInfoReq
	(*UpdateNotificationAccountInfoResp)(nil), // 56: aetim.user.updateNotificationAccountInfoResp
	(*SearchNotificationAccountReq)(nil),      // 57: aetim.user.searchNotificationAccountReq
	(*NotificationAccountInfo)(nil),           // 58: aetim.user.notificationAccountInfo
	(*SearchNotificationAccountResp)(nil),     // 59: aetim.user.searchNotificationAccountResp
	(*GetNotificationAccountReq)(nil),         // 60: aetim.user.getNotificationAccountReq
	(*GetNotificationAccountResp)(nil),        // 61: aetim.user.getNotificationAccountResp
	(*AccountCheckRespSingleUserStatus)(nil),  // 62: aetim.user.accountCheckResp.singleUserStatus
	nil,                                       // 63: aetim.user.userRegisterCountResp.CountEntry
	(*sdkws.RequestPagination)(nil),           // 64: aetim.sdkws.RequestPagination
	(*sdkws.UserInfo)(nil),                    // 65: aetim.sdkws.UserInfo
	(*sdkws.UserInfoWithEx)(nil),              // 66: aetim.sdkws.UserInfoWithEx
	(*conversation.Conversation)(nil),         // 67: aetim.conversation.Conversation
	(*wrapperspb.StringValue)(nil),            // 68: aetim.protobuf.StringValue
}
var file_user_user_proto_depIdxs = []int32{
	64, // 0: aetim.user.getAllUserIDReq.pagination:type_name -> aetim.sdkws.RequestPagination
	62, // 1: aetim.user.accountCheckResp.results:type_name -> aetim.user.accountCheckResp.singleUserStatus
	65, // 2: aetim.user.getDesignateUsersResp.usersInfo:type_name -> aetim.sdkws.UserInfo
	65, // 3: aetim.user.updateUserInfoReq.userInfo:type_name -> aetim.sdkws.UserInfo
	66, // 4: aetim.user.updateUserInfoExReq.userInfo:type_name -> aetim.sdkws.UserInfoWithEx
	67, // 5: aetim.user.setConversationReq.conversation:type_name -> aetim.conversation.Conversation
	67, // 6: aetim.user.getConversationResp.conversation:type_name -> aetim.conversation.Conversation
	67, // 7: aetim.user.getConversationsResp.conversations:type_name -> aetim.conversation.Conversation
	67, // 8: aetim.user.getAllConversationsResp.conversations:type_name -> aetim.conversation.Conversation
	67, // 9: aetim.user.batchSetConversationsReq.conversations:type_name -> aetim.conversation.Conversation
	64, // 10: aetim.user.getPaginationUsersReq.pagination:type_name -> aetim.sdkws.RequestPagination
	65, // 11: aetim.user.getPaginationUsersResp.users:type_name -> aetim.sdkws.UserInfo
	65, // 12: aetim.user.userRegisterReq.users:type_name -> aetim.sdkws.UserInfo
	63, // 13: aetim.user.userRegisterCountResp.count:type_name -> aetim.user.userRegisterCountResp.CountEntry
	36, // 14: aetim.user.subscribeOrCancelUsersStatusResp.statusList:type_name -> aetim.user.onlineStatus
	36, // 15: aetim.user.getSubscribeUsersStatusResp.statusList:type_name -> aetim.user.onlineStatus
	36, // 16: aetim.user.getUserStatusResp.statusList:type_name -> aetim.user.onlineStatus
	68, // 17: aetim.user.processUserCommandAddReq.value:type_name -> aetim.protobuf.StringValue
	68, // 18: aetim.user.processUserCommandAddReq.ex:type_name -> aetim.protobuf.StringValue
	68, // 19: aetim.user.processUserCommandUpdateReq.value:type_name -> aetim.protobuf.StringValue
	68, // 20: aetim.user.processUserCommandUpdateReq.ex:type_name -> aetim.protobuf.StringValue
	48, // 21: aetim.user.processUserCommandGetResp.CommandResp:type_name -> aetim.user.CommandInfoResp
	51, // 22: aetim.user.processUserCommandGetAllResp.CommandResp:type_name -> aetim.user.AllCommandInfoResp
	64, // 23: aetim.user.searchNotificationAccountReq.pagination:type_name -> aetim.sdkws.RequestPagination
	58, // 24: aetim.user.searchNotificationAccountResp.notificationAccounts:type_name -> aetim.user.notificationAccountInfo
	4,  // 25: aetim.user.user.getDesignateUsers:input_type -> aetim.user.getDesignateUsersReq
	6,  // 26: aetim.user.user.updateUserInfo:input_type -> aetim.user.updateUserInfoReq
	8,  // 27: aetim.user.user.updateUserInfoEx:input_type -> aetim.user.updateUserInfoExReq
	10, // 28: aetim.user.user.setGlobalRecvMessageOpt:input_type -> aetim.user.setGlobalRecvMessageOptReq
	28, // 29: aetim.user.user.getGlobalRecvMessageOpt:input_type -> aetim.user.getGlobalRecvMessageOptReq
	2,  // 30: aetim.user.user.accountCheck:input_type -> aetim.user.accountCheckReq
	24, // 31: aetim.user.user.getPaginationUsers:input_type -> aetim.user.getPaginationUsersReq
	26, // 32: aetim.user.user.userRegister:input_type -> aetim.user.userRegisterReq
	0,  // 33: aetim.user.user.getAllUserID:input_type -> aetim.user.getAllUserIDReq
	30, // 34: aetim.user.user.userRegisterCount:input_type -> aetim.user.userRegisterCountReq
	32, // 35: aetim.user.user.subscribeOrCancelUsersStatus:input_type -> aetim.user.subscribeOrCancelUsersStatusReq
	34, // 36: aetim.user.user.getSubscribeUsersStatus:input_type -> aetim.user.getSubscribeUsersStatusReq
	37, // 37: aetim.user.user.getUserStatus:input_type -> aetim.user.getUserStatusReq
	39, // 38: aetim.user.user.setUserStatus:input_type -> aetim.user.setUserStatusReq
	41, // 39: aetim.user.user.processUserCommandAdd:input_type -> aetim.user.processUserCommandAddReq
	45, // 40: aetim.user.user.processUserCommandUpdate:input_type -> aetim.user.processUserCommandUpdateReq
	43, // 41: aetim.user.user.processUserCommandDelete:input_type -> aetim.user.processUserCommandDeleteReq
	47, // 42: aetim.user.user.processUserCommandGet:input_type -> aetim.user.processUserCommandGetReq
	50, // 43: aetim.user.user.processUserCommandGetAll:input_type -> aetim.user.processUserCommandGetAllReq
	53, // 44: aetim.user.user.addNotificationAccount:input_type -> aetim.user.addNotificationAccountReq
	55, // 45: aetim.user.user.updateNotificationAccountInfo:input_type -> aetim.user.updateNotificationAccountInfoReq
	57, // 46: aetim.user.user.searchNotificationAccount:input_type -> aetim.user.searchNotificationAccountReq
	60, // 47: aetim.user.user.getNotificationAccount:input_type -> aetim.user.getNotificationAccountReq
	5,  // 48: aetim.user.user.getDesignateUsers:output_type -> aetim.user.getDesignateUsersResp
	7,  // 49: aetim.user.user.updateUserInfo:output_type -> aetim.user.updateUserInfoResp
	9,  // 50: aetim.user.user.updateUserInfoEx:output_type -> aetim.user.updateUserInfoExResp
	11, // 51: aetim.user.user.setGlobalRecvMessageOpt:output_type -> aetim.user.setGlobalRecvMessageOptResp
	29, // 52: aetim.user.user.getGlobalRecvMessageOpt:output_type -> aetim.user.getGlobalRecvMessageOptResp
	3,  // 53: aetim.user.user.accountCheck:output_type -> aetim.user.accountCheckResp
	25, // 54: aetim.user.user.getPaginationUsers:output_type -> aetim.user.getPaginationUsersResp
	27, // 55: aetim.user.user.userRegister:output_type -> aetim.user.userRegisterResp
	1,  // 56: aetim.user.user.getAllUserID:output_type -> aetim.user.getAllUserIDResp
	31, // 57: aetim.user.user.userRegisterCount:output_type -> aetim.user.userRegisterCountResp
	33, // 58: aetim.user.user.subscribeOrCancelUsersStatus:output_type -> aetim.user.subscribeOrCancelUsersStatusResp
	35, // 59: aetim.user.user.getSubscribeUsersStatus:output_type -> aetim.user.getSubscribeUsersStatusResp
	38, // 60: aetim.user.user.getUserStatus:output_type -> aetim.user.getUserStatusResp
	40, // 61: aetim.user.user.setUserStatus:output_type -> aetim.user.setUserStatusResp
	42, // 62: aetim.user.user.processUserCommandAdd:output_type -> aetim.user.processUserCommandAddResp
	46, // 63: aetim.user.user.processUserCommandUpdate:output_type -> aetim.user.processUserCommandUpdateResp
	44, // 64: aetim.user.user.processUserCommandDelete:output_type -> aetim.user.processUserCommandDeleteResp
	49, // 65: aetim.user.user.processUserCommandGet:output_type -> aetim.user.processUserCommandGetResp
	52, // 66: aetim.user.user.processUserCommandGetAll:output_type -> aetim.user.processUserCommandGetAllResp
	54, // 67: aetim.user.user.addNotificationAccount:output_type -> aetim.user.addNotificationAccountResp
	56, // 68: aetim.user.user.updateNotificationAccountInfo:output_type -> aetim.user.updateNotificationAccountInfoResp
	59, // 69: aetim.user.user.searchNotificationAccount:output_type -> aetim.user.searchNotificationAccountResp
	61, // 70: aetim.user.user.getNotificationAccount:output_type -> aetim.user.getNotificationAccountResp
	48, // [48:71] is the sub-list for method output_type
	25, // [25:48] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_user_user_proto_init() }
func file_user_user_proto_init() {
	if File_user_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllUserIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllUserIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCheckResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesignateUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesignateUsersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInfoExReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInfoExResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGlobalRecvMessageOptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGlobalRecvMessageOptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConversationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRecvMsgOptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRecvMsgOptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConversationsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllConversationsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllConversationsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetConversationsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetConversationsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaginationUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaginationUsersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegisterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGlobalRecvMessageOptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGlobalRecvMessageOptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegisterCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegisterCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeOrCancelUsersStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeOrCancelUsersStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscribeUsersStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubscribeUsersStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessUserCommandAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessUserCommandAddResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessUserCommandDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessUserCommandDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessUserCommandUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessUserCommandUpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessUserCommandGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessUserCommandGetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessUserCommandGetAllReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllCommandInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessUserCommandGetAllResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNotificationAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNotificationAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotificationAccountInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotificationAccountInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNotificationAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchNotificationAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotificationAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotificationAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_user_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCheckRespSingleUserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_user_proto_goTypes,
		DependencyIndexes: file_user_user_proto_depIdxs,
		MessageInfos:      file_user_user_proto_msgTypes,
	}.Build()
	File_user_user_proto = out.File
	file_user_user_proto_rawDesc = nil
	file_user_user_proto_goTypes = nil
	file_user_user_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
// UserClient 定义了与用户相关操作的服务接口
type UserClient interface {
	// GetDesignateUsers 获取指定用户的完整信息
	// ctx context.Context：上下文信息
	// in *GetDesignateUsersReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *GetDesignateUsersResp：响应数据
	// 返回值 error：错误信息
	GetDesignateUsers(ctx context.Context, in *GetDesignateUsersReq, opts ...grpc.CallOption) (*GetDesignateUsersResp, error)
	
	// UpdateUserInfo 更新用户信息
	// ctx context.Context：上下文信息
	// in *UpdateUserInfoReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *UpdateUserInfoResp：响应数据
	// 返回值 error：错误信息
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)

	// UpdateUserInfoEx 更新用户信息（扩展）
	// ctx context.Context：上下文信息
	// in *UpdateUserInfoExReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *UpdateUserInfoExResp：响应数据
	// 返回值 error：错误信息
	UpdateUserInfoEx(ctx context.Context, in *UpdateUserInfoExReq, opts ...grpc.CallOption) (*UpdateUserInfoExResp, error)

	// SetGlobalRecvMessageOpt 设置用户消息接收选项
	// ctx context.Context：上下文信息
	// in *SetGlobalRecvMessageOptReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *SetGlobalRecvMessageOptResp：响应数据
	// 返回值 error：错误信息
	SetGlobalRecvMessageOpt(ctx context.Context, in *SetGlobalRecvMessageOptReq, opts ...grpc.CallOption) (*SetGlobalRecvMessageOptResp, error)

	// GetGlobalRecvMessageOpt 获取用户消息接收选项
	// ctx context.Context：上下文信息
	// in *GetGlobalRecvMessageOptReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *GetGlobalRecvMessageOptResp：响应数据
	// 返回值 error：错误信息
	GetGlobalRecvMessageOpt(ctx context.Context, in *GetGlobalRecvMessageOptReq, opts ...grpc.CallOption) (*GetGlobalRecvMessageOptResp, error)

	// AccountCheck 检查用户ID是否存在
	// ctx context.Context：上下文信息
	// in *AccountCheckReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *AccountCheckResp：响应数据
	// 返回值 error：错误信息
	AccountCheck(ctx context.Context, in *AccountCheckReq, opts ...grpc.CallOption) (*AccountCheckResp, error)

	// GetPaginationUsers 分页获取用户信息（或指定用户ID、昵称）
	// ctx context.Context：上下文信息
	// in *GetPaginationUsersReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *GetPaginationUsersResp：响应数据
	// 返回值 error：错误信息
	GetPaginationUsers(ctx context.Context, in *GetPaginationUsersReq, opts ...grpc.CallOption) (*GetPaginationUsersResp, error)

	// UserRegister 用户注册
	// ctx context.Context：上下文信息
	// in *UserRegisterReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *UserRegisterResp：响应数据
	// 返回值 error：错误信息
	UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)

	// GetAllUserID 获取所有用户ID
	// ctx context.Context：上下文信息
	// in *GetAllUserIDReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *GetAllUserIDResp：响应数据
	// 返回值 error：错误信息
	GetAllUserID(ctx context.Context, in *GetAllUserIDReq, opts ...grpc.CallOption) (*GetAllUserIDResp, error)

	// UserRegisterCount 获取指定时间内用户注册总数及增量
	// ctx context.Context：上下文信息
	// in *UserRegisterCountReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *UserRegisterCountResp：响应数据
	// 返回值 error：错误信息
	UserRegisterCount(ctx context.Context, in *UserRegisterCountReq, opts ...grpc.CallOption) (*UserRegisterCountResp, error)

	// SubscribeOrCancelUsersStatus 订阅或取消用户状态
	// ctx context.Context：上下文信息
	// in *SubscribeOrCancelUsersStatusReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *SubscribeOrCancelUsersStatusResp：响应数据
	// 返回值 error：错误信息
	SubscribeOrCancelUsersStatus(ctx context.Context, in *SubscribeOrCancelUsersStatusReq, opts ...grpc.CallOption) (*SubscribeOrCancelUsersStatusResp, error)

	// GetSubscribeUsersStatus 获取订阅者在线状态
	// ctx context.Context：上下文信息
	// in *GetSubscribeUsersStatusReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *GetSubscribeUsersStatusResp：响应数据
	// 返回值 error：错误信息
	GetSubscribeUsersStatus(ctx context.Context, in *GetSubscribeUsersStatusReq, opts ...grpc.CallOption) (*GetSubscribeUsersStatusResp, error)

	// GetUserStatus 获取用户在线状态
	// ctx context.Context：上下文信息
	// in *GetUserStatusReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *GetUserStatusResp：响应数据
	// 返回值 error：错误信息
	GetUserStatus(ctx context.Context, in *GetUserStatusReq, opts ...grpc.CallOption) (*GetUserStatusResp, error)

	// SetUserStatus 向Redis同步用户在线状态
	// ctx context.Context：上下文信息
	// in *SetUserStatusReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *SetUserStatusResp：响应数据
	// 返回值 error：错误信息
	SetUserStatus(ctx context.Context, in *SetUserStatusReq, opts ...grpc.CallOption) (*SetUserStatusResp, error)

	// ProcessUserCommandAdd 执行添加用户的通用操作
	// ctx context.Context：上下文信息
	// in *ProcessUserCommandAddReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *ProcessUserCommandAddResp：响应数据
	// 返回值 error：错误信息
	ProcessUserCommandAdd(ctx context.Context, in *ProcessUserCommandAddReq, opts ...grpc.CallOption) (*ProcessUserCommandAddResp, error)

	// ProcessUserCommandUpdate 执行更新用户的通用操作
	// ctx context.Context：上下文信息
	// in *ProcessUserCommandUpdateReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *ProcessUserCommandUpdateResp：响应数据
	// 返回值 error：错误信息
	ProcessUserCommandUpdate(ctx context.Context, in *ProcessUserCommandUpdateReq, opts ...grpc.CallOption) (*ProcessUserCommandUpdateResp, error)

	// ProcessUserCommandDelete 执行删除用户的通用操作
	// ctx context.Context：上下文信息
	// in *ProcessUserCommandDeleteReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *ProcessUserCommandDeleteResp：响应数据
	// 返回值 error：错误信息
	ProcessUserCommandDelete(ctx context.Context, in *ProcessUserCommandDeleteReq, opts ...grpc.CallOption) (*ProcessUserCommandDeleteResp, error)

	// ProcessUserCommandGet 执行获取用户的通用操作
	// ctx context.Context：上下文信息
	// in *ProcessUserCommandGetReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *ProcessUserCommandGetResp：响应数据
	// 返回值 error：错误信息
	ProcessUserCommandGet(ctx context.Context, in *ProcessUserCommandGetReq, opts ...grpc.CallOption) (*ProcessUserCommandGetResp, error)

	// ProcessUserCommandGetAll 执行获取所有用户的通用操作
	// ctx context.Context：上下文信息
	// in *ProcessUserCommandGetAllReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *ProcessUserCommandGetAllResp：响应数据
	// 返回值 error：错误信息
	ProcessUserCommandGetAll(ctx context.Context, in *ProcessUserCommandGetAllReq, opts ...grpc.CallOption) (*ProcessUserCommandGetAllResp, error)

	// AddNotificationAccount 添加系统通知账号
	// ctx context.Context：上下文信息
	// in *AddNotificationAccountReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *AddNotificationAccountResp：响应数据
	// 返回值 error：错误信息
	AddNotificationAccount(ctx context.Context, in *AddNotificationAccountReq, opts ...grpc.CallOption) (*AddNotificationAccountResp, error)

	// UpdateNotificationAccountInfo 更新系统通知信息
	// ctx context.Context：上下文信息
	// in *UpdateNotificationAccountInfoReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *UpdateNotificationAccountInfoResp：响应数据
	// 返回值 error：错误信息
	UpdateNotificationAccountInfo(ctx context.Context, in *UpdateNotificationAccountInfoReq, opts ...grpc.CallOption) (*UpdateNotificationAccountInfoResp, error)

	// SearchNotificationAccount 搜索系统通知账号
	// ctx context.Context：上下文信息
	// in *SearchNotificationAccountReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *SearchNotificationAccountResp：响应数据
	// 返回值 error：错误信息
	SearchNotificationAccount(ctx context.Context, in *SearchNotificationAccountReq, opts ...grpc.CallOption) (*SearchNotificationAccountResp, error)

	// GetNotificationAccount 根据userID获取通知账号
	// ctx context.Context：上下文信息
	// in *GetNotificationAccountReq：请求参数
	// opts ...grpc.CallOption：调用选项
	// 返回值 *GetNotificationAccountResp：响应数据
	// 返回值 error：错误信息
	GetNotificationAccount(ctx context.Context, in *GetNotificationAccountReq, opts ...grpc.CallOption) (*GetNotificationAccountResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetDesignateUsers(ctx context.Context, in *GetDesignateUsersReq, opts ...grpc.CallOption) (*GetDesignateUsersResp, error) {
	out := new(GetDesignateUsersResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/getDesignateUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/updateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserInfoEx(ctx context.Context, in *UpdateUserInfoExReq, opts ...grpc.CallOption) (*UpdateUserInfoExResp, error) {
	out := new(UpdateUserInfoExResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/updateUserInfoEx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetGlobalRecvMessageOpt(ctx context.Context, in *SetGlobalRecvMessageOptReq, opts ...grpc.CallOption) (*SetGlobalRecvMessageOptResp, error) {
	out := new(SetGlobalRecvMessageOptResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/setGlobalRecvMessageOpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetGlobalRecvMessageOpt(ctx context.Context, in *GetGlobalRecvMessageOptReq, opts ...grpc.CallOption) (*GetGlobalRecvMessageOptResp, error) {
	out := new(GetGlobalRecvMessageOptResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/getGlobalRecvMessageOpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AccountCheck(ctx context.Context, in *AccountCheckReq, opts ...grpc.CallOption) (*AccountCheckResp, error) {
	out := new(AccountCheckResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/accountCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPaginationUsers(ctx context.Context, in *GetPaginationUsersReq, opts ...grpc.CallOption) (*GetPaginationUsersResp, error) {
	out := new(GetPaginationUsersResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/getPaginationUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	out := new(UserRegisterResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/userRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAllUserID(ctx context.Context, in *GetAllUserIDReq, opts ...grpc.CallOption) (*GetAllUserIDResp, error) {
	out := new(GetAllUserIDResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/getAllUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserRegisterCount(ctx context.Context, in *UserRegisterCountReq, opts ...grpc.CallOption) (*UserRegisterCountResp, error) {
	out := new(UserRegisterCountResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/userRegisterCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SubscribeOrCancelUsersStatus(ctx context.Context, in *SubscribeOrCancelUsersStatusReq, opts ...grpc.CallOption) (*SubscribeOrCancelUsersStatusResp, error) {
	out := new(SubscribeOrCancelUsersStatusResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/subscribeOrCancelUsersStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetSubscribeUsersStatus(ctx context.Context, in *GetSubscribeUsersStatusReq, opts ...grpc.CallOption) (*GetSubscribeUsersStatusResp, error) {
	out := new(GetSubscribeUsersStatusResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/getSubscribeUsersStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserStatus(ctx context.Context, in *GetUserStatusReq, opts ...grpc.CallOption) (*GetUserStatusResp, error) {
	out := new(GetUserStatusResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/getUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUserStatus(ctx context.Context, in *SetUserStatusReq, opts ...grpc.CallOption) (*SetUserStatusResp, error) {
	out := new(SetUserStatusResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/setUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ProcessUserCommandAdd(ctx context.Context, in *ProcessUserCommandAddReq, opts ...grpc.CallOption) (*ProcessUserCommandAddResp, error) {
	out := new(ProcessUserCommandAddResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/processUserCommandAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ProcessUserCommandUpdate(ctx context.Context, in *ProcessUserCommandUpdateReq, opts ...grpc.CallOption) (*ProcessUserCommandUpdateResp, error) {
	out := new(ProcessUserCommandUpdateResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/processUserCommandUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ProcessUserCommandDelete(ctx context.Context, in *ProcessUserCommandDeleteReq, opts ...grpc.CallOption) (*ProcessUserCommandDeleteResp, error) {
	out := new(ProcessUserCommandDeleteResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/processUserCommandDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ProcessUserCommandGet(ctx context.Context, in *ProcessUserCommandGetReq, opts ...grpc.CallOption) (*ProcessUserCommandGetResp, error) {
	out := new(ProcessUserCommandGetResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/processUserCommandGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ProcessUserCommandGetAll(ctx context.Context, in *ProcessUserCommandGetAllReq, opts ...grpc.CallOption) (*ProcessUserCommandGetAllResp, error) {
	out := new(ProcessUserCommandGetAllResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/processUserCommandGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddNotificationAccount(ctx context.Context, in *AddNotificationAccountReq, opts ...grpc.CallOption) (*AddNotificationAccountResp, error) {
	out := new(AddNotificationAccountResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/addNotificationAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateNotificationAccountInfo(ctx context.Context, in *UpdateNotificationAccountInfoReq, opts ...grpc.CallOption) (*UpdateNotificationAccountInfoResp, error) {
	out := new(UpdateNotificationAccountInfoResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/updateNotificationAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchNotificationAccount(ctx context.Context, in *SearchNotificationAccountReq, opts ...grpc.CallOption) (*SearchNotificationAccountResp, error) {
	out := new(SearchNotificationAccountResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/searchNotificationAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetNotificationAccount(ctx context.Context, in *GetNotificationAccountReq, opts ...grpc.CallOption) (*GetNotificationAccountResp, error) {
	out := new(GetNotificationAccountResp)
	err := c.cc.Invoke(ctx, "/aetim.user.user/getNotificationAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	// Get the specified user information full field
	GetDesignateUsers(context.Context, *GetDesignateUsersReq) (*GetDesignateUsersResp, error)
	// update user information
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	UpdateUserInfoEx(context.Context, *UpdateUserInfoExReq) (*UpdateUserInfoExResp, error)
	// Set user message receiving options
	SetGlobalRecvMessageOpt(context.Context, *SetGlobalRecvMessageOptReq) (*SetGlobalRecvMessageOptResp, error)
	// Get the user message receiving option If not found, no error will be returned
	GetGlobalRecvMessageOpt(context.Context, *GetGlobalRecvMessageOptReq) (*GetGlobalRecvMessageOptResp, error)
	// Check if userID exists
	AccountCheck(context.Context, *AccountCheckReq) (*AccountCheckResp, error)
	// Turn the page (or specify userID, nickname) to pull user information Full field
	GetPaginationUsers(context.Context, *GetPaginationUsersReq) (*GetPaginationUsersResp, error)
	// user registration
	UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error)
	// Get all user IDs
	GetAllUserID(context.Context, *GetAllUserIDReq) (*GetAllUserIDResp, error)
	// Get the total number of users and the user increment within a specified time period
	UserRegisterCount(context.Context, *UserRegisterCountReq) (*UserRegisterCountResp, error)
	// Subscribe or unsubscribe user presence
	SubscribeOrCancelUsersStatus(context.Context, *SubscribeOrCancelUsersStatusReq) (*SubscribeOrCancelUsersStatusResp, error)
	// Get the online status of subscribers
	GetSubscribeUsersStatus(context.Context, *GetSubscribeUsersStatusReq) (*GetSubscribeUsersStatusResp, error)
	// Get user online status
	GetUserStatus(context.Context, *GetUserStatusReq) (*GetUserStatusResp, error)
	// The gateway synchronizes the online status of users in redis
	SetUserStatus(context.Context, *SetUserStatusReq) (*SetUserStatusResp, error)
	// add a general function for add
	ProcessUserCommandAdd(context.Context, *ProcessUserCommandAddReq) (*ProcessUserCommandAddResp, error)
	// add a general function for update
	ProcessUserCommandUpdate(context.Context, *ProcessUserCommandUpdateReq) (*ProcessUserCommandUpdateResp, error)
	// add a general function for delete
	ProcessUserCommandDelete(context.Context, *ProcessUserCommandDeleteReq) (*ProcessUserCommandDeleteResp, error)
	// add a general function for get
	ProcessUserCommandGet(context.Context, *ProcessUserCommandGetReq) (*ProcessUserCommandGetResp, error)
	// add a general function for get all
	ProcessUserCommandGetAll(context.Context, *ProcessUserCommandGetAllReq) (*ProcessUserCommandGetAllResp, error)
	// add a system notification account
	AddNotificationAccount(context.Context, *AddNotificationAccountReq) (*AddNotificationAccountResp, error)
	// update the system notification info
	UpdateNotificationAccountInfo(context.Context, *UpdateNotificationAccountInfoReq) (*UpdateNotificationAccountInfoResp, error)
	// search the system notification account
	SearchNotificationAccount(context.Context, *SearchNotificationAccountReq) (*SearchNotificationAccountResp, error)
	// getNotificationAccount by userID
	GetNotificationAccount(context.Context, *GetNotificationAccountReq) (*GetNotificationAccountResp, error)
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) GetDesignateUsers(context.Context, *GetDesignateUsersReq) (*GetDesignateUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesignateUsers not implemented")
}
func (*UnimplementedUserServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (*UnimplementedUserServer) UpdateUserInfoEx(context.Context, *UpdateUserInfoExReq) (*UpdateUserInfoExResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfoEx not implemented")
}
func (*UnimplementedUserServer) SetGlobalRecvMessageOpt(context.Context, *SetGlobalRecvMessageOptReq) (*SetGlobalRecvMessageOptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGlobalRecvMessageOpt not implemented")
}
func (*UnimplementedUserServer) GetGlobalRecvMessageOpt(context.Context, *GetGlobalRecvMessageOptReq) (*GetGlobalRecvMessageOptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalRecvMessageOpt not implemented")
}
func (*UnimplementedUserServer) AccountCheck(context.Context, *AccountCheckReq) (*AccountCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCheck not implemented")
}
func (*UnimplementedUserServer) GetPaginationUsers(context.Context, *GetPaginationUsersReq) (*GetPaginationUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginationUsers not implemented")
}
func (*UnimplementedUserServer) UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (*UnimplementedUserServer) GetAllUserID(context.Context, *GetAllUserIDReq) (*GetAllUserIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserID not implemented")
}
func (*UnimplementedUserServer) UserRegisterCount(context.Context, *UserRegisterCountReq) (*UserRegisterCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegisterCount not implemented")
}
func (*UnimplementedUserServer) SubscribeOrCancelUsersStatus(context.Context, *SubscribeOrCancelUsersStatusReq) (*SubscribeOrCancelUsersStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeOrCancelUsersStatus not implemented")
}
func (*UnimplementedUserServer) GetSubscribeUsersStatus(context.Context, *GetSubscribeUsersStatusReq) (*GetSubscribeUsersStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribeUsersStatus not implemented")
}
func (*UnimplementedUserServer) GetUserStatus(context.Context, *GetUserStatusReq) (*GetUserStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatus not implemented")
}
func (*UnimplementedUserServer) SetUserStatus(context.Context, *SetUserStatusReq) (*SetUserStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserStatus not implemented")
}
func (*UnimplementedUserServer) ProcessUserCommandAdd(context.Context, *ProcessUserCommandAddReq) (*ProcessUserCommandAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessUserCommandAdd not implemented")
}
func (*UnimplementedUserServer) ProcessUserCommandUpdate(context.Context, *ProcessUserCommandUpdateReq) (*ProcessUserCommandUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessUserCommandUpdate not implemented")
}
func (*UnimplementedUserServer) ProcessUserCommandDelete(context.Context, *ProcessUserCommandDeleteReq) (*ProcessUserCommandDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessUserCommandDelete not implemented")
}
func (*UnimplementedUserServer) ProcessUserCommandGet(context.Context, *ProcessUserCommandGetReq) (*ProcessUserCommandGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessUserCommandGet not implemented")
}
func (*UnimplementedUserServer) ProcessUserCommandGetAll(context.Context, *ProcessUserCommandGetAllReq) (*ProcessUserCommandGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessUserCommandGetAll not implemented")
}
func (*UnimplementedUserServer) AddNotificationAccount(context.Context, *AddNotificationAccountReq) (*AddNotificationAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotificationAccount not implemented")
}
func (*UnimplementedUserServer) UpdateNotificationAccountInfo(context.Context, *UpdateNotificationAccountInfoReq) (*UpdateNotificationAccountInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationAccountInfo not implemented")
}
func (*UnimplementedUserServer) SearchNotificationAccount(context.Context, *SearchNotificationAccountReq) (*SearchNotificationAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNotificationAccount not implemented")
}
func (*UnimplementedUserServer) GetNotificationAccount(context.Context, *GetNotificationAccountReq) (*GetNotificationAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationAccount not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_GetDesignateUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDesignateUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetDesignateUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/GetDesignateUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetDesignateUsers(ctx, req.(*GetDesignateUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserInfoEx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoExReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserInfoEx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/UpdateUserInfoEx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserInfoEx(ctx, req.(*UpdateUserInfoExReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetGlobalRecvMessageOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalRecvMessageOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetGlobalRecvMessageOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/SetGlobalRecvMessageOpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetGlobalRecvMessageOpt(ctx, req.(*SetGlobalRecvMessageOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetGlobalRecvMessageOpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGlobalRecvMessageOptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetGlobalRecvMessageOpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/GetGlobalRecvMessageOpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetGlobalRecvMessageOpt(ctx, req.(*GetGlobalRecvMessageOptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AccountCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AccountCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/AccountCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AccountCheck(ctx, req.(*AccountCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPaginationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaginationUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPaginationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/GetPaginationUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPaginationUsers(ctx, req.(*GetPaginationUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserRegister(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAllUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAllUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/GetAllUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAllUserID(ctx, req.(*GetAllUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserRegisterCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserRegisterCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/UserRegisterCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserRegisterCount(ctx, req.(*UserRegisterCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SubscribeOrCancelUsersStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeOrCancelUsersStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SubscribeOrCancelUsersStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/SubscribeOrCancelUsersStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SubscribeOrCancelUsersStatus(ctx, req.(*SubscribeOrCancelUsersStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetSubscribeUsersStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscribeUsersStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetSubscribeUsersStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/GetSubscribeUsersStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetSubscribeUsersStatus(ctx, req.(*GetSubscribeUsersStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/GetUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserStatus(ctx, req.(*GetUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/SetUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUserStatus(ctx, req.(*SetUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ProcessUserCommandAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessUserCommandAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ProcessUserCommandAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/ProcessUserCommandAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ProcessUserCommandAdd(ctx, req.(*ProcessUserCommandAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ProcessUserCommandUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessUserCommandUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ProcessUserCommandUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/ProcessUserCommandUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ProcessUserCommandUpdate(ctx, req.(*ProcessUserCommandUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ProcessUserCommandDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessUserCommandDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ProcessUserCommandDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/ProcessUserCommandDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ProcessUserCommandDelete(ctx, req.(*ProcessUserCommandDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ProcessUserCommandGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessUserCommandGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ProcessUserCommandGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/ProcessUserCommandGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ProcessUserCommandGet(ctx, req.(*ProcessUserCommandGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ProcessUserCommandGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessUserCommandGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ProcessUserCommandGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/ProcessUserCommandGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ProcessUserCommandGetAll(ctx, req.(*ProcessUserCommandGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddNotificationAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNotificationAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddNotificationAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/AddNotificationAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddNotificationAccount(ctx, req.(*AddNotificationAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateNotificationAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateNotificationAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/UpdateNotificationAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateNotificationAccountInfo(ctx, req.(*UpdateNotificationAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchNotificationAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNotificationAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchNotificationAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/SearchNotificationAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchNotificationAccount(ctx, req.(*SearchNotificationAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetNotificationAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetNotificationAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetim.user.user/GetNotificationAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetNotificationAccount(ctx, req.(*GetNotificationAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aetim.user.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getDesignateUsers",
			Handler:    _User_GetDesignateUsers_Handler,
		},
		{
			MethodName: "updateUserInfo",
			Handler:    _User_UpdateUserInfo_Handler,
		},
		{
			MethodName: "updateUserInfoEx",
			Handler:    _User_UpdateUserInfoEx_Handler,
		},
		{
			MethodName: "setGlobalRecvMessageOpt",
			Handler:    _User_SetGlobalRecvMessageOpt_Handler,
		},
		{
			MethodName: "getGlobalRecvMessageOpt",
			Handler:    _User_GetGlobalRecvMessageOpt_Handler,
		},
		{
			MethodName: "accountCheck",
			Handler:    _User_AccountCheck_Handler,
		},
		{
			MethodName: "getPaginationUsers",
			Handler:    _User_GetPaginationUsers_Handler,
		},
		{
			MethodName: "userRegister",
			Handler:    _User_UserRegister_Handler,
		},
		{
			MethodName: "getAllUserID",
			Handler:    _User_GetAllUserID_Handler,
		},
		{
			MethodName: "userRegisterCount",
			Handler:    _User_UserRegisterCount_Handler,
		},
		{
			MethodName: "subscribeOrCancelUsersStatus",
			Handler:    _User_SubscribeOrCancelUsersStatus_Handler,
		},
		{
			MethodName: "getSubscribeUsersStatus",
			Handler:    _User_GetSubscribeUsersStatus_Handler,
		},
		{
			MethodName: "getUserStatus",
			Handler:    _User_GetUserStatus_Handler,
		},
		{
			MethodName: "setUserStatus",
			Handler:    _User_SetUserStatus_Handler,
		},
		{
			MethodName: "processUserCommandAdd",
			Handler:    _User_ProcessUserCommandAdd_Handler,
		},
		{
			MethodName: "processUserCommandUpdate",
			Handler:    _User_ProcessUserCommandUpdate_Handler,
		},
		{
			MethodName: "processUserCommandDelete",
			Handler:    _User_ProcessUserCommandDelete_Handler,
		},
		{
			MethodName: "processUserCommandGet",
			Handler:    _User_ProcessUserCommandGet_Handler,
		},
		{
			MethodName: "processUserCommandGetAll",
			Handler:    _User_ProcessUserCommandGetAll_Handler,
		},
		{
			MethodName: "addNotificationAccount",
			Handler:    _User_AddNotificationAccount_Handler,
		},
		{
			MethodName: "updateNotificationAccountInfo",
			Handler:    _User_UpdateNotificationAccountInfo_Handler,
		},
		{
			MethodName: "searchNotificationAccount",
			Handler:    _User_SearchNotificationAccount_Handler,
		},
		{
			MethodName: "getNotificationAccount",
			Handler:    _User_GetNotificationAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
